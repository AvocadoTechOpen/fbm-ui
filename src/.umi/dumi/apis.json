{
  "Alert": {
    "default": [
      {
        "identifier": "type",
        "description": "Alert类型 可选 默认为info",
        "type": "AlertType"
      },
      {
        "identifier": "children",
        "description": "Alert显示内容",
        "type": "ReactNode"
      },
      {
        "identifier": "message",
        "description": "提示文案",
        "type": "ReactNode"
      },
      {
        "identifier": "action",
        "description": "The action to display. It renders after the message, at the end of the alert.",
        "type": "ReactNode"
      },
      {
        "identifier": "classes",
        "description": "Override or extend the styles applied to the component.",
        "type": "Partial<AlertClasses>"
      },
      {
        "identifier": "closeText",
        "description": "Override the default label for the *close popup* icon button.\n\nFor localization purposes, you can use the provided [translations](/guides/localization/).",
        "type": "string",
        "default": "'Close'"
      },
      {
        "identifier": "color",
        "description": "The main color for the alert. Unless provided, the value is taken from the `severity` prop.",
        "type": "\"error\" | \"warning\" | \"success\" | \"info\""
      },
      {
        "identifier": "severity",
        "description": "The severity of the alert. This defines the color and icon used.",
        "type": "AlertColor",
        "default": "'success'"
      },
      {
        "identifier": "icon",
        "description": "Override the icon displayed before the children.\nUnless provided, the icon is mapped to the value of the `severity` prop.",
        "type": "ReactNode"
      },
      {
        "identifier": "role",
        "description": "The ARIA role attribute of the element.",
        "type": "string",
        "default": "'alert'"
      },
      {
        "identifier": "iconMapping",
        "description": "The component maps the `severity` prop to a range of different icons,\nfor instance success to `<SuccessOutlined>`.\nIf you wish to change this mapping, you can provide your own.\nAlternatively, you can use the `icon` prop to override the icon displayed.",
        "type": "Partial<Record<AlertColor, ReactNode>>"
      },
      {
        "identifier": "onClose",
        "description": "Callback fired when the component requests to be closed.\nWhen provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n@param event The event source of the callback.",
        "type": "(event: SyntheticEvent<Element, Event>) => void"
      },
      {
        "identifier": "variant",
        "description": "The variant to use.",
        "type": "\"standard\" | \"filled\" | \"outlined\"",
        "default": "'standard'"
      },
      {
        "identifier": "sx",
        "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
        "type": "SxProps<Theme>"
      },
      {
        "identifier": "className",
        "type": "string"
      },
      {
        "identifier": "style",
        "type": "CSSProperties"
      },
      {
        "identifier": "elevation",
        "description": "Shadow depth, corresponds to `dp` in the spec.\nIt accepts values between 0 and 24 inclusive.",
        "type": "number",
        "default": "1"
      },
      {
        "identifier": "square",
        "description": "If `true`, rounded corners are disabled.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "ref",
        "type": "Ref<HTMLDivElement>"
      },
      {
        "identifier": "slot",
        "type": "string"
      },
      {
        "identifier": "title",
        "type": "string"
      },
      {
        "identifier": "key",
        "type": "Key"
      },
      {
        "identifier": "defaultChecked",
        "type": "boolean"
      },
      {
        "identifier": "defaultValue",
        "type": "string | number | readonly string[]"
      },
      {
        "identifier": "suppressContentEditableWarning",
        "type": "boolean"
      },
      {
        "identifier": "suppressHydrationWarning",
        "type": "boolean"
      },
      {
        "identifier": "accessKey",
        "type": "string"
      },
      {
        "identifier": "contentEditable",
        "type": "Booleanish | \"inherit\""
      },
      {
        "identifier": "contextMenu",
        "type": "string"
      },
      {
        "identifier": "dir",
        "type": "string"
      },
      {
        "identifier": "draggable",
        "type": "Booleanish"
      },
      {
        "identifier": "hidden",
        "type": "boolean"
      },
      {
        "identifier": "id",
        "type": "string"
      },
      {
        "identifier": "lang",
        "type": "string"
      },
      {
        "identifier": "placeholder",
        "type": "string"
      },
      {
        "identifier": "spellCheck",
        "type": "Booleanish"
      },
      {
        "identifier": "tabIndex",
        "type": "number"
      },
      {
        "identifier": "translate",
        "type": "\"yes\" | \"no\""
      },
      {
        "identifier": "radioGroup",
        "type": "string"
      },
      {
        "identifier": "about",
        "type": "string"
      },
      {
        "identifier": "datatype",
        "type": "string"
      },
      {
        "identifier": "inlist",
        "type": "any"
      },
      {
        "identifier": "prefix",
        "type": "string"
      },
      {
        "identifier": "property",
        "type": "string"
      },
      {
        "identifier": "resource",
        "type": "string"
      },
      {
        "identifier": "typeof",
        "type": "string"
      },
      {
        "identifier": "vocab",
        "type": "string"
      },
      {
        "identifier": "autoCapitalize",
        "type": "string"
      },
      {
        "identifier": "autoCorrect",
        "type": "string"
      },
      {
        "identifier": "autoSave",
        "type": "string"
      },
      {
        "identifier": "itemProp",
        "type": "string"
      },
      {
        "identifier": "itemScope",
        "type": "boolean"
      },
      {
        "identifier": "itemType",
        "type": "string"
      },
      {
        "identifier": "itemID",
        "type": "string"
      },
      {
        "identifier": "itemRef",
        "type": "string"
      },
      {
        "identifier": "results",
        "type": "number"
      },
      {
        "identifier": "security",
        "type": "string"
      },
      {
        "identifier": "unselectable",
        "type": "\"on\" | \"off\""
      },
      {
        "identifier": "inputMode",
        "description": "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
        "type": "\"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\""
      },
      {
        "identifier": "is",
        "description": "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
        "type": "string"
      },
      {
        "identifier": "aria-activedescendant",
        "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
        "type": "string"
      },
      {
        "identifier": "aria-atomic",
        "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-autocomplete",
        "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
        "type": "\"list\" | \"none\" | \"inline\" | \"both\""
      },
      {
        "identifier": "aria-busy",
        "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-checked",
        "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.",
        "type": "boolean | \"true\" | \"false\" | \"mixed\""
      },
      {
        "identifier": "aria-colcount",
        "description": "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
        "type": "number"
      },
      {
        "identifier": "aria-colindex",
        "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
        "type": "number"
      },
      {
        "identifier": "aria-colspan",
        "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
        "type": "number"
      },
      {
        "identifier": "aria-controls",
        "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
        "type": "string"
      },
      {
        "identifier": "aria-current",
        "description": "Indicates the element that represents the current item within a container or set of related elements.",
        "type": "boolean | \"time\" | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | \"date\""
      },
      {
        "identifier": "aria-describedby",
        "description": "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
        "type": "string"
      },
      {
        "identifier": "aria-details",
        "description": "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-disabled",
        "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-dropeffect",
        "description": "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
        "type": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\""
      },
      {
        "identifier": "aria-errormessage",
        "description": "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-expanded",
        "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-flowto",
        "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
        "type": "string"
      },
      {
        "identifier": "aria-grabbed",
        "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-haspopup",
        "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
        "type": "boolean | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"grid\" | \"listbox\" | \"tree\""
      },
      {
        "identifier": "aria-hidden",
        "description": "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-invalid",
        "description": "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
        "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
      },
      {
        "identifier": "aria-keyshortcuts",
        "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
        "type": "string"
      },
      {
        "identifier": "aria-label",
        "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
        "type": "string"
      },
      {
        "identifier": "aria-labelledby",
        "description": "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-level",
        "description": "Defines the hierarchical level of an element within a structure.",
        "type": "number"
      },
      {
        "identifier": "aria-live",
        "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
        "type": "\"off\" | \"assertive\" | \"polite\""
      },
      {
        "identifier": "aria-modal",
        "description": "Indicates whether an element is modal when displayed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-multiline",
        "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-multiselectable",
        "description": "Indicates that the user may select more than one item from the current selectable descendants.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-orientation",
        "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
        "type": "\"horizontal\" | \"vertical\""
      },
      {
        "identifier": "aria-owns",
        "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
        "type": "string"
      },
      {
        "identifier": "aria-placeholder",
        "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
        "type": "string"
      },
      {
        "identifier": "aria-posinset",
        "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
        "type": "number"
      },
      {
        "identifier": "aria-pressed",
        "description": "Indicates the current \"pressed\" state of toggle buttons.\n@see aria-checked\n@see aria-selected.",
        "type": "boolean | \"true\" | \"false\" | \"mixed\""
      },
      {
        "identifier": "aria-readonly",
        "description": "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-relevant",
        "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
        "type": "\"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\""
      },
      {
        "identifier": "aria-required",
        "description": "Indicates that user input is required on the element before a form may be submitted.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-roledescription",
        "description": "Defines a human-readable, author-localized description for the role of an element.",
        "type": "string"
      },
      {
        "identifier": "aria-rowcount",
        "description": "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
        "type": "number"
      },
      {
        "identifier": "aria-rowindex",
        "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
        "type": "number"
      },
      {
        "identifier": "aria-rowspan",
        "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
        "type": "number"
      },
      {
        "identifier": "aria-selected",
        "description": "Indicates the current \"selected\" state of various widgets.\n@see aria-checked\n@see aria-pressed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-setsize",
        "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
        "type": "number"
      },
      {
        "identifier": "aria-sort",
        "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
        "type": "\"none\" | \"ascending\" | \"descending\" | \"other\""
      },
      {
        "identifier": "aria-valuemax",
        "description": "Defines the maximum allowed value for a range widget.",
        "type": "number"
      },
      {
        "identifier": "aria-valuemin",
        "description": "Defines the minimum allowed value for a range widget.",
        "type": "number"
      },
      {
        "identifier": "aria-valuenow",
        "description": "Defines the current value for a range widget.\n@see aria-valuetext.",
        "type": "number"
      },
      {
        "identifier": "aria-valuetext",
        "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
        "type": "string"
      },
      {
        "identifier": "dangerouslySetInnerHTML",
        "type": "{ __html: string; }"
      },
      {
        "identifier": "onCopy",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCopyCapture",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCut",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCutCapture",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPaste",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPasteCapture",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionEnd",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionEndCapture",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionStart",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionStartCapture",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionUpdate",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionUpdateCapture",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onFocus",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onFocusCapture",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBlur",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBlurCapture",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onChange",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onChangeCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBeforeInput",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBeforeInputCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInput",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInputCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onReset",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onResetCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSubmit",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSubmitCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInvalid",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInvalidCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoad",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onError",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onErrorCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyDown",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyDownCapture",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyPress",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyPressCapture",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyUp",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyUpCapture",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAbort",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAbortCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlay",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlayCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlayThrough",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlayThroughCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDurationChange",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDurationChangeCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEmptied",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEmptiedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEncrypted",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEncryptedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEnded",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEndedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedData",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedDataCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedMetadata",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedMetadataCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadStart",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadStartCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPause",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPauseCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlay",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlayCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlaying",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlayingCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onProgress",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onProgressCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onRateChange",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onRateChangeCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeeked",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeekedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeeking",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeekingCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onStalled",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onStalledCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSuspend",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSuspendCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTimeUpdate",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTimeUpdateCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onVolumeChange",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onVolumeChangeCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWaiting",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWaitingCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAuxClick",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAuxClickCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onClick",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onClickCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onContextMenu",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onContextMenuCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDoubleClick",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDoubleClickCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDrag",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEnd",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEndCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEnter",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEnterCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragExit",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragExitCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragLeave",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragLeaveCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragOver",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragOverCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragStart",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragStartCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDrop",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDropCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseDown",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseDownCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseEnter",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseLeave",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseMove",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseMoveCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOut",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOutCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOver",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOverCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseUp",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseUpCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSelect",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSelectCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchCancel",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchCancelCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchEnd",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchEndCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchMove",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchMoveCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchStart",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchStartCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerDown",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerDownCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerMove",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerMoveCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerUp",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerUpCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerCancel",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerCancelCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerEnter",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerEnterCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerLeave",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerLeaveCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOver",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOverCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOut",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOutCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onGotPointerCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onGotPointerCaptureCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLostPointerCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLostPointerCaptureCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onScroll",
        "type": "UIEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onScrollCapture",
        "type": "UIEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWheel",
        "type": "WheelEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWheelCapture",
        "type": "WheelEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationStart",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationStartCapture",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationEnd",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationEndCapture",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationIteration",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationIterationCapture",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTransitionEnd",
        "type": "TransitionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTransitionEndCapture",
        "type": "TransitionEventHandler<HTMLDivElement>"
      }
    ]
  },
  "Avatar": {
    "default": [
      {
        "identifier": "size",
        "description": "尺寸",
        "type": "string",
        "default": "middle"
      },
      {
        "identifier": "disabled",
        "description": "是否为禁用状态",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "alt",
        "description": "Used in combination with `src` or `srcSet` to\nprovide an alt attribute for the rendered `img` element.",
        "type": "string"
      },
      {
        "identifier": "children",
        "description": "Used to render icon or text elements inside the Avatar if `src` is not set.\nThis can be an element, or just a string.",
        "type": "ReactNode"
      },
      {
        "identifier": "classes",
        "description": "Override or extend the styles applied to the component.",
        "type": "Partial<AvatarClasses> & Partial<ClassNameMap<never>>"
      },
      {
        "identifier": "imgProps",
        "description": "<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes\">Attributes</a> applied to the `img` element if the component is used to display an image.\nIt can be used to listen for the loading error event.",
        "type": "ImgHTMLAttributes<HTMLImageElement>"
      },
      {
        "identifier": "sizes",
        "description": "The `sizes` attribute for the `img` element.",
        "type": "string"
      },
      {
        "identifier": "src",
        "description": "The `src` attribute for the `img` element.",
        "type": "string"
      },
      {
        "identifier": "srcSet",
        "description": "The `srcSet` attribute for the `img` element.\nUse this attribute for responsive image display.",
        "type": "string"
      },
      {
        "identifier": "sx",
        "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
        "type": "SxProps<Theme>"
      },
      {
        "identifier": "variant",
        "description": "The shape of the avatar.",
        "type": "\"circular\" | \"rounded\" | \"square\"",
        "default": "'circular'"
      },
      {
        "identifier": "className",
        "type": "string"
      },
      {
        "identifier": "style",
        "type": "CSSProperties"
      },
      {
        "identifier": "ref",
        "type": "Ref<HTMLDivElement>"
      },
      {
        "identifier": "slot",
        "type": "string"
      },
      {
        "identifier": "title",
        "type": "string"
      },
      {
        "identifier": "key",
        "type": "Key"
      },
      {
        "identifier": "defaultChecked",
        "type": "boolean"
      },
      {
        "identifier": "defaultValue",
        "type": "string | number | readonly string[]"
      },
      {
        "identifier": "suppressContentEditableWarning",
        "type": "boolean"
      },
      {
        "identifier": "suppressHydrationWarning",
        "type": "boolean"
      },
      {
        "identifier": "accessKey",
        "type": "string"
      },
      {
        "identifier": "contentEditable",
        "type": "Booleanish | \"inherit\""
      },
      {
        "identifier": "contextMenu",
        "type": "string"
      },
      {
        "identifier": "dir",
        "type": "string"
      },
      {
        "identifier": "draggable",
        "type": "Booleanish"
      },
      {
        "identifier": "hidden",
        "type": "boolean"
      },
      {
        "identifier": "id",
        "type": "string"
      },
      {
        "identifier": "lang",
        "type": "string"
      },
      {
        "identifier": "placeholder",
        "type": "string"
      },
      {
        "identifier": "spellCheck",
        "type": "Booleanish"
      },
      {
        "identifier": "tabIndex",
        "type": "number"
      },
      {
        "identifier": "translate",
        "type": "\"yes\" | \"no\""
      },
      {
        "identifier": "radioGroup",
        "type": "string"
      },
      {
        "identifier": "role",
        "type": "AriaRole"
      },
      {
        "identifier": "about",
        "type": "string"
      },
      {
        "identifier": "datatype",
        "type": "string"
      },
      {
        "identifier": "inlist",
        "type": "any"
      },
      {
        "identifier": "prefix",
        "type": "string"
      },
      {
        "identifier": "property",
        "type": "string"
      },
      {
        "identifier": "resource",
        "type": "string"
      },
      {
        "identifier": "typeof",
        "type": "string"
      },
      {
        "identifier": "vocab",
        "type": "string"
      },
      {
        "identifier": "autoCapitalize",
        "type": "string"
      },
      {
        "identifier": "autoCorrect",
        "type": "string"
      },
      {
        "identifier": "autoSave",
        "type": "string"
      },
      {
        "identifier": "color",
        "type": "string"
      },
      {
        "identifier": "itemProp",
        "type": "string"
      },
      {
        "identifier": "itemScope",
        "type": "boolean"
      },
      {
        "identifier": "itemType",
        "type": "string"
      },
      {
        "identifier": "itemID",
        "type": "string"
      },
      {
        "identifier": "itemRef",
        "type": "string"
      },
      {
        "identifier": "results",
        "type": "number"
      },
      {
        "identifier": "security",
        "type": "string"
      },
      {
        "identifier": "unselectable",
        "type": "\"on\" | \"off\""
      },
      {
        "identifier": "inputMode",
        "description": "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
        "type": "\"search\" | \"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\""
      },
      {
        "identifier": "is",
        "description": "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
        "type": "string"
      },
      {
        "identifier": "aria-activedescendant",
        "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
        "type": "string"
      },
      {
        "identifier": "aria-atomic",
        "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-autocomplete",
        "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
        "type": "\"list\" | \"none\" | \"inline\" | \"both\""
      },
      {
        "identifier": "aria-busy",
        "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-checked",
        "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.",
        "type": "boolean | \"true\" | \"false\" | \"mixed\""
      },
      {
        "identifier": "aria-colcount",
        "description": "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
        "type": "number"
      },
      {
        "identifier": "aria-colindex",
        "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
        "type": "number"
      },
      {
        "identifier": "aria-colspan",
        "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
        "type": "number"
      },
      {
        "identifier": "aria-controls",
        "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
        "type": "string"
      },
      {
        "identifier": "aria-current",
        "description": "Indicates the element that represents the current item within a container or set of related elements.",
        "type": "boolean | \"time\" | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | \"date\""
      },
      {
        "identifier": "aria-describedby",
        "description": "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
        "type": "string"
      },
      {
        "identifier": "aria-details",
        "description": "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-disabled",
        "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-dropeffect",
        "description": "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
        "type": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\""
      },
      {
        "identifier": "aria-errormessage",
        "description": "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-expanded",
        "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-flowto",
        "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
        "type": "string"
      },
      {
        "identifier": "aria-grabbed",
        "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-haspopup",
        "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
        "type": "boolean | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"grid\" | \"listbox\" | \"tree\""
      },
      {
        "identifier": "aria-hidden",
        "description": "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-invalid",
        "description": "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
        "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
      },
      {
        "identifier": "aria-keyshortcuts",
        "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
        "type": "string"
      },
      {
        "identifier": "aria-label",
        "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
        "type": "string"
      },
      {
        "identifier": "aria-labelledby",
        "description": "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-level",
        "description": "Defines the hierarchical level of an element within a structure.",
        "type": "number"
      },
      {
        "identifier": "aria-live",
        "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
        "type": "\"off\" | \"assertive\" | \"polite\""
      },
      {
        "identifier": "aria-modal",
        "description": "Indicates whether an element is modal when displayed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-multiline",
        "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-multiselectable",
        "description": "Indicates that the user may select more than one item from the current selectable descendants.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-orientation",
        "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
        "type": "\"horizontal\" | \"vertical\""
      },
      {
        "identifier": "aria-owns",
        "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
        "type": "string"
      },
      {
        "identifier": "aria-placeholder",
        "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
        "type": "string"
      },
      {
        "identifier": "aria-posinset",
        "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
        "type": "number"
      },
      {
        "identifier": "aria-pressed",
        "description": "Indicates the current \"pressed\" state of toggle buttons.\n@see aria-checked\n@see aria-selected.",
        "type": "boolean | \"true\" | \"false\" | \"mixed\""
      },
      {
        "identifier": "aria-readonly",
        "description": "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-relevant",
        "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
        "type": "\"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\""
      },
      {
        "identifier": "aria-required",
        "description": "Indicates that user input is required on the element before a form may be submitted.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-roledescription",
        "description": "Defines a human-readable, author-localized description for the role of an element.",
        "type": "string"
      },
      {
        "identifier": "aria-rowcount",
        "description": "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
        "type": "number"
      },
      {
        "identifier": "aria-rowindex",
        "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
        "type": "number"
      },
      {
        "identifier": "aria-rowspan",
        "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
        "type": "number"
      },
      {
        "identifier": "aria-selected",
        "description": "Indicates the current \"selected\" state of various widgets.\n@see aria-checked\n@see aria-pressed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-setsize",
        "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
        "type": "number"
      },
      {
        "identifier": "aria-sort",
        "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
        "type": "\"none\" | \"ascending\" | \"descending\" | \"other\""
      },
      {
        "identifier": "aria-valuemax",
        "description": "Defines the maximum allowed value for a range widget.",
        "type": "number"
      },
      {
        "identifier": "aria-valuemin",
        "description": "Defines the minimum allowed value for a range widget.",
        "type": "number"
      },
      {
        "identifier": "aria-valuenow",
        "description": "Defines the current value for a range widget.\n@see aria-valuetext.",
        "type": "number"
      },
      {
        "identifier": "aria-valuetext",
        "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
        "type": "string"
      },
      {
        "identifier": "dangerouslySetInnerHTML",
        "type": "{ __html: string; }"
      },
      {
        "identifier": "onCopy",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCopyCapture",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCut",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCutCapture",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPaste",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPasteCapture",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionEnd",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionEndCapture",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionStart",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionStartCapture",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionUpdate",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionUpdateCapture",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onFocus",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onFocusCapture",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBlur",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBlurCapture",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onChange",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onChangeCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBeforeInput",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBeforeInputCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInput",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInputCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onReset",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onResetCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSubmit",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSubmitCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInvalid",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInvalidCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoad",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onError",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onErrorCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyDown",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyDownCapture",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyPress",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyPressCapture",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyUp",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyUpCapture",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAbort",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAbortCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlay",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlayCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlayThrough",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlayThroughCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDurationChange",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDurationChangeCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEmptied",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEmptiedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEncrypted",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEncryptedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEnded",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEndedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedData",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedDataCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedMetadata",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedMetadataCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadStart",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadStartCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPause",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPauseCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlay",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlayCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlaying",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlayingCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onProgress",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onProgressCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onRateChange",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onRateChangeCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeeked",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeekedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeeking",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeekingCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onStalled",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onStalledCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSuspend",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSuspendCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTimeUpdate",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTimeUpdateCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onVolumeChange",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onVolumeChangeCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWaiting",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWaitingCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAuxClick",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAuxClickCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onClick",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onClickCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onContextMenu",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onContextMenuCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDoubleClick",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDoubleClickCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDrag",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEnd",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEndCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEnter",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEnterCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragExit",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragExitCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragLeave",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragLeaveCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragOver",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragOverCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragStart",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragStartCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDrop",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDropCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseDown",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseDownCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseEnter",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseLeave",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseMove",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseMoveCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOut",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOutCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOver",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOverCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseUp",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseUpCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSelect",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSelectCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchCancel",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchCancelCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchEnd",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchEndCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchMove",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchMoveCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchStart",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchStartCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerDown",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerDownCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerMove",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerMoveCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerUp",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerUpCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerCancel",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerCancelCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerEnter",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerEnterCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerLeave",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerLeaveCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOver",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOverCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOut",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOutCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onGotPointerCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onGotPointerCaptureCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLostPointerCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLostPointerCaptureCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onScroll",
        "type": "UIEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onScrollCapture",
        "type": "UIEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWheel",
        "type": "WheelEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWheelCapture",
        "type": "WheelEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationStart",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationStartCapture",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationEnd",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationEndCapture",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationIteration",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationIterationCapture",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTransitionEnd",
        "type": "TransitionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTransitionEndCapture",
        "type": "TransitionEventHandler<HTMLDivElement>"
      }
    ]
  },
  "Box": {
    "default": [
      {
        "identifier": "loading",
        "description": "loading",
        "type": "boolean | LoadingProps"
      },
      {
        "identifier": "disabled",
        "description": "是否禁用",
        "type": "boolean"
      },
      {
        "identifier": "border",
        "type": "ResponsiveStyleValue<number | (string & {}) | \"inset\" | \"hidden\" | \"inherit\" | \"none\" | \"-moz-initial\" | \"initial\" | \"revert\" | \"unset\" | \"medium\" | \"thick\" | \"thin\" | \"dashed\" | \"dotted\" | \"double\" | ... 181 more ... | \"currentcolor\"> | ((theme: Theme) => ResponsiveStyleValue<...>)"
      },
      {
        "identifier": "borderTop",
        "type": "ResponsiveStyleValue<BorderTop<string | number> | BorderTop<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<BorderTop<string | number> | BorderTop<...>[]>)"
      },
      {
        "identifier": "borderRight",
        "type": "ResponsiveStyleValue<BorderRight<string | number> | BorderRight<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<BorderRight<...> | BorderRight<...>[]>)"
      },
      {
        "identifier": "borderBottom",
        "type": "ResponsiveStyleValue<BorderBottom<string | number> | BorderBottom<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"
      },
      {
        "identifier": "borderLeft",
        "type": "ResponsiveStyleValue<BorderLeft<string | number> | BorderLeft<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<BorderLeft<string | number> | BorderLeft<...>[]>)"
      },
      {
        "identifier": "borderColor",
        "type": "ResponsiveStyleValue<BorderColor | BorderColor[]> | ((theme: Theme) => ResponsiveStyleValue<BorderColor | BorderColor[]>)"
      },
      {
        "identifier": "borderRadius",
        "type": "ResponsiveStyleValue<BorderRadius<string | number> | BorderRadius<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"
      },
      {
        "identifier": "display",
        "type": "ResponsiveStyleValue<Display | Display[]> | ((theme: Theme) => ResponsiveStyleValue<Display | Display[]>)"
      },
      {
        "identifier": "displayPrint",
        "type": "ResponsiveStyleValue<Display | Display[]> | ((theme: Theme) => ResponsiveStyleValue<Display | Display[]>)"
      },
      {
        "identifier": "overflow",
        "type": "ResponsiveStyleValue<Overflow | Overflow[]> | ((theme: Theme) => ResponsiveStyleValue<Overflow | Overflow[]>)"
      },
      {
        "identifier": "textOverflow",
        "type": "ResponsiveStyleValue<TextOverflow | TextOverflow[]> | ((theme: Theme) => ResponsiveStyleValue<TextOverflow | TextOverflow[]>)"
      },
      {
        "identifier": "visibility",
        "type": "ResponsiveStyleValue<Visibility | Visibility[]> | ((theme: Theme) => ResponsiveStyleValue<Visibility | Visibility[]>)"
      },
      {
        "identifier": "whiteSpace",
        "type": "ResponsiveStyleValue<WhiteSpace | WhiteSpace[]> | ((theme: Theme) => ResponsiveStyleValue<WhiteSpace | WhiteSpace[]>)"
      },
      {
        "identifier": "flexBasis",
        "type": "ResponsiveStyleValue<FlexBasis<string | number> | FlexBasis<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<FlexBasis<string | number> | FlexBasis<...>[]>)"
      },
      {
        "identifier": "flexDirection",
        "type": "ResponsiveStyleValue<FlexDirection | FlexDirection[]> | ((theme: Theme) => ResponsiveStyleValue<FlexDirection | FlexDirection[]>)"
      },
      {
        "identifier": "flexWrap",
        "type": "ResponsiveStyleValue<FlexWrap | FlexWrap[]> | ((theme: Theme) => ResponsiveStyleValue<FlexWrap | FlexWrap[]>)"
      },
      {
        "identifier": "justifyContent",
        "type": "ResponsiveStyleValue<JustifyContent | JustifyContent[]> | ((theme: Theme) => ResponsiveStyleValue<JustifyContent | JustifyContent[]>)"
      },
      {
        "identifier": "alignItems",
        "type": "ResponsiveStyleValue<AlignItems | AlignItems[]> | ((theme: Theme) => ResponsiveStyleValue<AlignItems | AlignItems[]>)"
      },
      {
        "identifier": "alignContent",
        "type": "ResponsiveStyleValue<AlignContent | AlignContent[]> | ((theme: Theme) => ResponsiveStyleValue<AlignContent | AlignContent[]>)"
      },
      {
        "identifier": "order",
        "type": "ResponsiveStyleValue<Order | Order[]> | ((theme: Theme) => ResponsiveStyleValue<Order | Order[]>)"
      },
      {
        "identifier": "flex",
        "type": "ResponsiveStyleValue<Flex<string | number> | Flex<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<Flex<string | number> | Flex<...>[]>)"
      },
      {
        "identifier": "flexGrow",
        "type": "ResponsiveStyleValue<FlexGrow | FlexGrow[]> | ((theme: Theme) => ResponsiveStyleValue<FlexGrow | FlexGrow[]>)"
      },
      {
        "identifier": "flexShrink",
        "type": "ResponsiveStyleValue<FlexShrink | FlexShrink[]> | ((theme: Theme) => ResponsiveStyleValue<FlexShrink | FlexShrink[]>)"
      },
      {
        "identifier": "alignSelf",
        "type": "ResponsiveStyleValue<AlignSelf | AlignSelf[]> | ((theme: Theme) => ResponsiveStyleValue<AlignSelf | AlignSelf[]>)"
      },
      {
        "identifier": "justifyItems",
        "type": "ResponsiveStyleValue<JustifyItems | JustifyItems[]> | ((theme: Theme) => ResponsiveStyleValue<JustifyItems | JustifyItems[]>)"
      },
      {
        "identifier": "justifySelf",
        "type": "ResponsiveStyleValue<JustifySelf | JustifySelf[]> | ((theme: Theme) => ResponsiveStyleValue<JustifySelf | JustifySelf[]>)"
      },
      {
        "identifier": "gap",
        "type": "ResponsiveStyleValue<Gap<string | number> | Gap<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<Gap<string | number> | Gap<string | number>[]>)"
      },
      {
        "identifier": "columnGap",
        "type": "ResponsiveStyleValue<ColumnGap<string | number> | ColumnGap<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<ColumnGap<string | number> | ColumnGap<...>[]>)"
      },
      {
        "identifier": "rowGap",
        "type": "ResponsiveStyleValue<RowGap<string | number> | RowGap<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<RowGap<string | number> | RowGap<...>[]>)"
      },
      {
        "identifier": "gridColumn",
        "type": "ResponsiveStyleValue<GridColumn | GridColumn[]> | ((theme: Theme) => ResponsiveStyleValue<GridColumn | GridColumn[]>)"
      },
      {
        "identifier": "gridRow",
        "type": "ResponsiveStyleValue<GridRow | GridRow[]> | ((theme: Theme) => ResponsiveStyleValue<GridRow | GridRow[]>)"
      },
      {
        "identifier": "gridAutoFlow",
        "type": "ResponsiveStyleValue<GridAutoFlow | GridAutoFlow[]> | ((theme: Theme) => ResponsiveStyleValue<GridAutoFlow | GridAutoFlow[]>)"
      },
      {
        "identifier": "gridAutoColumns",
        "type": "ResponsiveStyleValue<GridAutoColumns<string | number> | GridAutoColumns<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"
      },
      {
        "identifier": "gridAutoRows",
        "type": "ResponsiveStyleValue<GridAutoRows<string | number> | GridAutoRows<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"
      },
      {
        "identifier": "gridTemplateColumns",
        "type": "ResponsiveStyleValue<GridTemplateColumns<string | number> | GridTemplateColumns<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"
      },
      {
        "identifier": "gridTemplateRows",
        "type": "ResponsiveStyleValue<GridTemplateRows<string | number> | GridTemplateRows<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"
      },
      {
        "identifier": "gridTemplateAreas",
        "type": "ResponsiveStyleValue<GridTemplateAreas | GridTemplateAreas[]> | ((theme: Theme) => ResponsiveStyleValue<GridTemplateAreas | GridTemplateAreas[]>)"
      },
      {
        "identifier": "gridArea",
        "type": "ResponsiveStyleValue<GridArea | GridArea[]> | ((theme: Theme) => ResponsiveStyleValue<GridArea | GridArea[]>)"
      },
      {
        "identifier": "bgcolor",
        "type": "ResponsiveStyleValue<BackgroundColor | BackgroundColor[]> | ((theme: Theme) => ResponsiveStyleValue<BackgroundColor | BackgroundColor[]>)"
      },
      {
        "identifier": "color",
        "type": "ResponsiveStyleValue<Color | Color[]> | ((theme: Theme) => ResponsiveStyleValue<Color | Color[]>)"
      },
      {
        "identifier": "zIndex",
        "type": "ResponsiveStyleValue<string | (number & {})> | ((theme: Theme) => ResponsiveStyleValue<string | (number & {})>)"
      },
      {
        "identifier": "position",
        "type": "ResponsiveStyleValue<Position | Position[]> | ((theme: Theme) => ResponsiveStyleValue<Position | Position[]>)"
      },
      {
        "identifier": "top",
        "type": "ResponsiveStyleValue<Top<string | number> | Top<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<Top<string | number> | Top<string | number>[]>)"
      },
      {
        "identifier": "right",
        "type": "ResponsiveStyleValue<Right<string | number> | Right<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<Right<string | number> | Right<...>[]>)"
      },
      {
        "identifier": "bottom",
        "type": "ResponsiveStyleValue<Bottom<string | number> | Bottom<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<Bottom<string | number> | Bottom<...>[]>)"
      },
      {
        "identifier": "left",
        "type": "ResponsiveStyleValue<Left<string | number> | Left<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<Left<string | number> | Left<...>[]>)"
      },
      {
        "identifier": "boxShadow",
        "type": "ResponsiveStyleValue<number | BoxShadow> | ((theme: Theme) => ResponsiveStyleValue<number | BoxShadow>)"
      },
      {
        "identifier": "width",
        "type": "ResponsiveStyleValue<Width<string | number> | Width<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<Width<string | number> | Width<...>[]>)"
      },
      {
        "identifier": "maxWidth",
        "type": "ResponsiveStyleValue<MaxWidth<string | number> | MaxWidth<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<MaxWidth<string | number> | MaxWidth<...>[]>)"
      },
      {
        "identifier": "minWidth",
        "type": "ResponsiveStyleValue<MinWidth<string | number> | MinWidth<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<MinWidth<string | number> | MinWidth<...>[]>)"
      },
      {
        "identifier": "height",
        "type": "ResponsiveStyleValue<Height<string | number> | Height<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<Height<string | number> | Height<...>[]>)"
      },
      {
        "identifier": "maxHeight",
        "type": "ResponsiveStyleValue<MaxHeight<string | number> | MaxHeight<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<MaxHeight<string | number> | MaxHeight<...>[]>)"
      },
      {
        "identifier": "minHeight",
        "type": "ResponsiveStyleValue<MinHeight<string | number> | MinHeight<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<MinHeight<string | number> | MinHeight<...>[]>)"
      },
      {
        "identifier": "boxSizing",
        "type": "ResponsiveStyleValue<BoxSizing | BoxSizing[]> | ((theme: Theme) => ResponsiveStyleValue<BoxSizing | BoxSizing[]>)"
      },
      {
        "identifier": "m",
        "type": "ResponsiveStyleValue<Margin<string | number> | Margin<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<Margin<string | number> | Margin<...>[]>)"
      },
      {
        "identifier": "mt",
        "type": "ResponsiveStyleValue<MarginTop<string | number> | MarginTop<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginTop<string | number> | MarginTop<...>[]>)"
      },
      {
        "identifier": "mr",
        "type": "ResponsiveStyleValue<MarginRight<string | number> | MarginRight<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginRight<...> | MarginRight<...>[]>)"
      },
      {
        "identifier": "mb",
        "type": "ResponsiveStyleValue<MarginBottom<string | number> | MarginBottom<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"
      },
      {
        "identifier": "ml",
        "type": "ResponsiveStyleValue<MarginLeft<string | number> | MarginLeft<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginLeft<string | number> | MarginLeft<...>[]>)"
      },
      {
        "identifier": "mx",
        "type": "ResponsiveStyleValue<MarginLeft<string | number> | MarginLeft<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginLeft<string | number> | MarginLeft<...>[]>)"
      },
      {
        "identifier": "my",
        "type": "ResponsiveStyleValue<MarginTop<string | number> | MarginTop<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginTop<string | number> | MarginTop<...>[]>)"
      },
      {
        "identifier": "p",
        "type": "ResponsiveStyleValue<Padding<string | number> | Padding<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<Padding<string | number> | Padding<...>[]>)"
      },
      {
        "identifier": "pt",
        "type": "ResponsiveStyleValue<PaddingTop<string | number> | PaddingTop<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingTop<string | number> | PaddingTop<...>[]>)"
      },
      {
        "identifier": "pr",
        "type": "ResponsiveStyleValue<PaddingRight<string | number> | PaddingRight<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"
      },
      {
        "identifier": "pb",
        "type": "ResponsiveStyleValue<PaddingBottom<string | number> | PaddingBottom<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"
      },
      {
        "identifier": "pl",
        "type": "ResponsiveStyleValue<PaddingLeft<string | number> | PaddingLeft<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingLeft<...> | PaddingLeft<...>[]>)"
      },
      {
        "identifier": "px",
        "type": "ResponsiveStyleValue<PaddingLeft<string | number> | PaddingLeft<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingLeft<...> | PaddingLeft<...>[]>)"
      },
      {
        "identifier": "py",
        "type": "ResponsiveStyleValue<PaddingTop<string | number> | PaddingTop<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingTop<string | number> | PaddingTop<...>[]>)"
      },
      {
        "identifier": "margin",
        "type": "ResponsiveStyleValue<Margin<string | number> | Margin<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<Margin<string | number> | Margin<...>[]>)"
      },
      {
        "identifier": "marginTop",
        "type": "ResponsiveStyleValue<MarginTop<string | number> | MarginTop<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginTop<string | number> | MarginTop<...>[]>)"
      },
      {
        "identifier": "marginRight",
        "type": "ResponsiveStyleValue<MarginRight<string | number> | MarginRight<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginRight<...> | MarginRight<...>[]>)"
      },
      {
        "identifier": "marginBottom",
        "type": "ResponsiveStyleValue<MarginBottom<string | number> | MarginBottom<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"
      },
      {
        "identifier": "marginLeft",
        "type": "ResponsiveStyleValue<MarginLeft<string | number> | MarginLeft<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginLeft<string | number> | MarginLeft<...>[]>)"
      },
      {
        "identifier": "marginX",
        "type": "ResponsiveStyleValue<MarginLeft<string | number> | MarginLeft<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginLeft<string | number> | MarginLeft<...>[]>)"
      },
      {
        "identifier": "marginY",
        "type": "ResponsiveStyleValue<MarginTop<string | number> | MarginTop<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<MarginTop<string | number> | MarginTop<...>[]>)"
      },
      {
        "identifier": "padding",
        "type": "ResponsiveStyleValue<Padding<string | number> | Padding<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<Padding<string | number> | Padding<...>[]>)"
      },
      {
        "identifier": "paddingTop",
        "type": "ResponsiveStyleValue<PaddingTop<string | number> | PaddingTop<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingTop<string | number> | PaddingTop<...>[]>)"
      },
      {
        "identifier": "paddingRight",
        "type": "ResponsiveStyleValue<PaddingRight<string | number> | PaddingRight<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"
      },
      {
        "identifier": "paddingBottom",
        "type": "ResponsiveStyleValue<PaddingBottom<string | number> | PaddingBottom<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"
      },
      {
        "identifier": "paddingLeft",
        "type": "ResponsiveStyleValue<PaddingLeft<string | number> | PaddingLeft<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingLeft<...> | PaddingLeft<...>[]>)"
      },
      {
        "identifier": "paddingX",
        "type": "ResponsiveStyleValue<PaddingLeft<string | number> | PaddingLeft<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingLeft<...> | PaddingLeft<...>[]>)"
      },
      {
        "identifier": "paddingY",
        "type": "ResponsiveStyleValue<PaddingTop<string | number> | PaddingTop<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<PaddingTop<string | number> | PaddingTop<...>[]>)"
      },
      {
        "identifier": "typography",
        "type": "ResponsiveStyleValue<string> | ((theme: Theme) => ResponsiveStyleValue<string>)"
      },
      {
        "identifier": "fontFamily",
        "type": "ResponsiveStyleValue<FontFamily | FontFamily[]> | ((theme: Theme) => ResponsiveStyleValue<FontFamily | FontFamily[]>)"
      },
      {
        "identifier": "fontSize",
        "type": "ResponsiveStyleValue<FontSize<string | number> | FontSize<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<FontSize<string | number> | FontSize<...>[]>)"
      },
      {
        "identifier": "fontStyle",
        "type": "ResponsiveStyleValue<FontStyle | FontStyle[]> | ((theme: Theme) => ResponsiveStyleValue<FontStyle | FontStyle[]>)"
      },
      {
        "identifier": "fontWeight",
        "type": "ResponsiveStyleValue<string | (number & {})> | ((theme: Theme) => ResponsiveStyleValue<string | (number & {})>)"
      },
      {
        "identifier": "letterSpacing",
        "type": "ResponsiveStyleValue<LetterSpacing<string | number> | LetterSpacing<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<...>)"
      },
      {
        "identifier": "lineHeight",
        "type": "ResponsiveStyleValue<LineHeight<string | number> | LineHeight<string | number>[]> | ((theme: Theme) => ResponsiveStyleValue<LineHeight<string | number> | LineHeight<...>[]>)"
      },
      {
        "identifier": "textAlign",
        "type": "ResponsiveStyleValue<TextAlign | TextAlign[]> | ((theme: Theme) => ResponsiveStyleValue<TextAlign | TextAlign[]>)"
      },
      {
        "identifier": "component",
        "type": "ElementType<any>"
      },
      {
        "identifier": "ref",
        "type": "Ref<unknown>"
      },
      {
        "identifier": "sx",
        "type": "SxProps<Theme>"
      },
      {
        "identifier": "className",
        "type": "string"
      },
      {
        "identifier": "style",
        "type": "CSSProperties"
      },
      {
        "identifier": "classes",
        "description": "Override or extend the styles applied to the component.",
        "type": "Partial<ClassNameMap<never>>"
      },
      {
        "identifier": "translate",
        "type": "\"yes\" | \"no\""
      },
      {
        "identifier": "slot",
        "type": "string"
      },
      {
        "identifier": "title",
        "type": "string"
      },
      {
        "identifier": "key",
        "type": "Key"
      },
      {
        "identifier": "defaultChecked",
        "type": "boolean"
      },
      {
        "identifier": "defaultValue",
        "type": "string | number | readonly string[]"
      },
      {
        "identifier": "suppressContentEditableWarning",
        "type": "boolean"
      },
      {
        "identifier": "suppressHydrationWarning",
        "type": "boolean"
      },
      {
        "identifier": "accessKey",
        "type": "string"
      },
      {
        "identifier": "contentEditable",
        "type": "Booleanish | \"inherit\""
      },
      {
        "identifier": "contextMenu",
        "type": "string"
      },
      {
        "identifier": "dir",
        "type": "string"
      },
      {
        "identifier": "draggable",
        "type": "Booleanish"
      },
      {
        "identifier": "hidden",
        "type": "boolean"
      },
      {
        "identifier": "id",
        "type": "string"
      },
      {
        "identifier": "lang",
        "type": "string"
      },
      {
        "identifier": "placeholder",
        "type": "string"
      },
      {
        "identifier": "spellCheck",
        "type": "Booleanish"
      },
      {
        "identifier": "tabIndex",
        "type": "number"
      },
      {
        "identifier": "radioGroup",
        "type": "string"
      },
      {
        "identifier": "role",
        "type": "AriaRole"
      },
      {
        "identifier": "about",
        "type": "string"
      },
      {
        "identifier": "datatype",
        "type": "string"
      },
      {
        "identifier": "inlist",
        "type": "any"
      },
      {
        "identifier": "prefix",
        "type": "string"
      },
      {
        "identifier": "property",
        "type": "string"
      },
      {
        "identifier": "resource",
        "type": "string"
      },
      {
        "identifier": "typeof",
        "type": "string"
      },
      {
        "identifier": "vocab",
        "type": "string"
      },
      {
        "identifier": "autoCapitalize",
        "type": "string"
      },
      {
        "identifier": "autoCorrect",
        "type": "string"
      },
      {
        "identifier": "autoSave",
        "type": "string"
      },
      {
        "identifier": "itemProp",
        "type": "string"
      },
      {
        "identifier": "itemScope",
        "type": "boolean"
      },
      {
        "identifier": "itemType",
        "type": "string"
      },
      {
        "identifier": "itemID",
        "type": "string"
      },
      {
        "identifier": "itemRef",
        "type": "string"
      },
      {
        "identifier": "results",
        "type": "number"
      },
      {
        "identifier": "security",
        "type": "string"
      },
      {
        "identifier": "unselectable",
        "type": "\"on\" | \"off\""
      },
      {
        "identifier": "inputMode",
        "description": "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
        "type": "\"text\" | \"search\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\""
      },
      {
        "identifier": "is",
        "description": "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
        "type": "string"
      },
      {
        "identifier": "aria-activedescendant",
        "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
        "type": "string"
      },
      {
        "identifier": "aria-atomic",
        "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-autocomplete",
        "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
        "type": "\"list\" | \"none\" | \"inline\" | \"both\""
      },
      {
        "identifier": "aria-busy",
        "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-checked",
        "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.",
        "type": "boolean | \"true\" | \"false\" | \"mixed\""
      },
      {
        "identifier": "aria-colcount",
        "description": "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
        "type": "number"
      },
      {
        "identifier": "aria-colindex",
        "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
        "type": "number"
      },
      {
        "identifier": "aria-colspan",
        "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
        "type": "number"
      },
      {
        "identifier": "aria-controls",
        "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
        "type": "string"
      },
      {
        "identifier": "aria-current",
        "description": "Indicates the element that represents the current item within a container or set of related elements.",
        "type": "boolean | \"time\" | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | \"date\""
      },
      {
        "identifier": "aria-describedby",
        "description": "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
        "type": "string"
      },
      {
        "identifier": "aria-details",
        "description": "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-disabled",
        "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-dropeffect",
        "description": "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
        "type": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\""
      },
      {
        "identifier": "aria-errormessage",
        "description": "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-expanded",
        "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-flowto",
        "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
        "type": "string"
      },
      {
        "identifier": "aria-grabbed",
        "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-haspopup",
        "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
        "type": "boolean | \"grid\" | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"listbox\" | \"tree\""
      },
      {
        "identifier": "aria-hidden",
        "description": "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-invalid",
        "description": "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
        "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
      },
      {
        "identifier": "aria-keyshortcuts",
        "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
        "type": "string"
      },
      {
        "identifier": "aria-label",
        "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
        "type": "string"
      },
      {
        "identifier": "aria-labelledby",
        "description": "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-level",
        "description": "Defines the hierarchical level of an element within a structure.",
        "type": "number"
      },
      {
        "identifier": "aria-live",
        "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
        "type": "\"off\" | \"assertive\" | \"polite\""
      },
      {
        "identifier": "aria-modal",
        "description": "Indicates whether an element is modal when displayed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-multiline",
        "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-multiselectable",
        "description": "Indicates that the user may select more than one item from the current selectable descendants.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-orientation",
        "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
        "type": "\"horizontal\" | \"vertical\""
      },
      {
        "identifier": "aria-owns",
        "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
        "type": "string"
      },
      {
        "identifier": "aria-placeholder",
        "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
        "type": "string"
      },
      {
        "identifier": "aria-posinset",
        "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
        "type": "number"
      },
      {
        "identifier": "aria-pressed",
        "description": "Indicates the current \"pressed\" state of toggle buttons.\n@see aria-checked\n@see aria-selected.",
        "type": "boolean | \"true\" | \"false\" | \"mixed\""
      },
      {
        "identifier": "aria-readonly",
        "description": "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-relevant",
        "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
        "type": "\"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\""
      },
      {
        "identifier": "aria-required",
        "description": "Indicates that user input is required on the element before a form may be submitted.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-roledescription",
        "description": "Defines a human-readable, author-localized description for the role of an element.",
        "type": "string"
      },
      {
        "identifier": "aria-rowcount",
        "description": "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
        "type": "number"
      },
      {
        "identifier": "aria-rowindex",
        "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
        "type": "number"
      },
      {
        "identifier": "aria-rowspan",
        "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
        "type": "number"
      },
      {
        "identifier": "aria-selected",
        "description": "Indicates the current \"selected\" state of various widgets.\n@see aria-checked\n@see aria-pressed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-setsize",
        "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
        "type": "number"
      },
      {
        "identifier": "aria-sort",
        "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
        "type": "\"none\" | \"ascending\" | \"descending\" | \"other\""
      },
      {
        "identifier": "aria-valuemax",
        "description": "Defines the maximum allowed value for a range widget.",
        "type": "number"
      },
      {
        "identifier": "aria-valuemin",
        "description": "Defines the minimum allowed value for a range widget.",
        "type": "number"
      },
      {
        "identifier": "aria-valuenow",
        "description": "Defines the current value for a range widget.\n@see aria-valuetext.",
        "type": "number"
      },
      {
        "identifier": "aria-valuetext",
        "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
        "type": "string"
      },
      {
        "identifier": "dangerouslySetInnerHTML",
        "type": "{ __html: string; }"
      },
      {
        "identifier": "onCopy",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCopyCapture",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCut",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCutCapture",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPaste",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPasteCapture",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionEnd",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionEndCapture",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionStart",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionStartCapture",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionUpdate",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionUpdateCapture",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onFocus",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onFocusCapture",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBlur",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBlurCapture",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onChange",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onChangeCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBeforeInput",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBeforeInputCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInput",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInputCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onReset",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onResetCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSubmit",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSubmitCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInvalid",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInvalidCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoad",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onError",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onErrorCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyDown",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyDownCapture",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyPress",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyPressCapture",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyUp",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyUpCapture",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAbort",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAbortCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlay",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlayCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlayThrough",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlayThroughCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDurationChange",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDurationChangeCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEmptied",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEmptiedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEncrypted",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEncryptedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEnded",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEndedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedData",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedDataCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedMetadata",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedMetadataCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadStart",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadStartCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPause",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPauseCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlay",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlayCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlaying",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlayingCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onProgress",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onProgressCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onRateChange",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onRateChangeCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeeked",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeekedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeeking",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeekingCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onStalled",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onStalledCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSuspend",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSuspendCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTimeUpdate",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTimeUpdateCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onVolumeChange",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onVolumeChangeCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWaiting",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWaitingCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAuxClick",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAuxClickCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onClick",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onClickCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onContextMenu",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onContextMenuCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDoubleClick",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDoubleClickCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDrag",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEnd",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEndCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEnter",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEnterCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragExit",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragExitCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragLeave",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragLeaveCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragOver",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragOverCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragStart",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragStartCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDrop",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDropCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseDown",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseDownCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseEnter",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseLeave",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseMove",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseMoveCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOut",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOutCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOver",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOverCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseUp",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseUpCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSelect",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSelectCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchCancel",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchCancelCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchEnd",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchEndCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchMove",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchMoveCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchStart",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchStartCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerDown",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerDownCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerMove",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerMoveCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerUp",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerUpCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerCancel",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerCancelCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerEnter",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerEnterCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerLeave",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerLeaveCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOver",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOverCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOut",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOutCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onGotPointerCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onGotPointerCaptureCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLostPointerCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLostPointerCaptureCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onScroll",
        "type": "UIEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onScrollCapture",
        "type": "UIEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWheel",
        "type": "WheelEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWheelCapture",
        "type": "WheelEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationStart",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationStartCapture",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationEnd",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationEndCapture",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationIteration",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationIterationCapture",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTransitionEnd",
        "type": "TransitionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTransitionEndCapture",
        "type": "TransitionEventHandler<HTMLDivElement>"
      }
    ]
  },
  "confirm": {
    "default": [
      {
        "identifier": "content",
        "type": "ReactNode"
      },
      {
        "identifier": "type",
        "description": "\bADialog类型 可选",
        "type": "dialogType"
      },
      {
        "identifier": "title",
        "description": "\b标题\b",
        "type": "string"
      },
      {
        "identifier": "footer",
        "description": "\b\b传null则不显示， 传vnode则自定义底部内容， 不传则展示默认footer",
        "type": "ReactNode"
      },
      {
        "identifier": "okText",
        "description": "footer 确认按钮文案 默认为“好的”'",
        "type": "string"
      },
      {
        "identifier": "closeText",
        "description": "footer 取消按钮文案 默认为“取消”'",
        "type": "string"
      },
      {
        "identifier": "isShowHeaderClose",
        "description": "是否显示dialog又上角“x”",
        "type": "boolean"
      },
      {
        "identifier": "isShowFooterClose",
        "description": "是否显示取消按钮",
        "type": "boolean"
      },
      {
        "identifier": "okProps",
        "description": "footer 取消按钮props",
        "type": "{ children?: ReactNode; classes?: Partial<ButtonClasses>; color?: \"inherit\" | \"error\" | \"warning\" | \"success\" | \"info\" | \"primary\" | \"secondary\"; ... 9 more ...; variant?: \"text\" | ... 1 more ... | \"contained\"; } & Omit<...> & CommonProps & Omit<...>"
      },
      {
        "identifier": "closeProps",
        "description": "footer 取消按钮props",
        "type": "{ children?: ReactNode; classes?: Partial<ButtonClasses>; color?: \"inherit\" | \"error\" | \"warning\" | \"success\" | \"info\" | \"primary\" | \"secondary\"; ... 9 more ...; variant?: \"text\" | ... 1 more ... | \"contained\"; } & Omit<...> & CommonProps & Omit<...>"
      },
      {
        "identifier": "onOk",
        "description": "footer 确定按钮click事件",
        "type": "() => void | Promise<void>"
      },
      {
        "identifier": "onClose",
        "description": "footer 取消按钮事件",
        "type": "() => void"
      },
      {
        "identifier": "aria-describedby",
        "description": "The id(s) of the element(s) that describe the dialog.",
        "type": "string"
      },
      {
        "identifier": "aria-labelledby",
        "description": "The id(s) of the element(s) that label the dialog.",
        "type": "string"
      },
      {
        "identifier": "children",
        "description": "Dialog children, usually the included sub-components.",
        "type": "ReactNode"
      },
      {
        "identifier": "classes",
        "description": "Override or extend the styles applied to the component.",
        "type": "Partial<DialogClasses>"
      },
      {
        "identifier": "disableEscapeKeyDown",
        "description": "If `true`, hitting escape will not fire the `onClose` callback.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "fullScreen",
        "description": "If `true`, the dialog is full-screen.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "fullWidth",
        "description": "If `true`, the dialog stretches to `maxWidth`.\n\nNotice that the dialog width grow is limited by the default margin.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "maxWidth",
        "description": "Determine the max-width of the dialog.\nThe dialog width grows with the size of the screen.\nSet to `false` to disable `maxWidth`.",
        "type": "false | Breakpoint",
        "default": "'sm'"
      },
      {
        "identifier": "onBackdropClick",
        "description": "Callback fired when the backdrop is clicked.",
        "type": "ReactEventHandler<{}>"
      },
      {
        "identifier": "open",
        "description": "If `true`, the component is shown.",
        "type": "boolean",
        "required": true
      },
      {
        "identifier": "PaperComponent",
        "description": "The component used to render the body of the dialog.",
        "type": "JSXElementConstructor<PaperProps<\"div\", {}>>",
        "default": "Paper"
      },
      {
        "identifier": "PaperProps",
        "description": "Props applied to the [`Paper`](/api/paper/) element.",
        "type": "Partial<PaperProps<\"div\", {}>>",
        "default": "{}"
      },
      {
        "identifier": "scroll",
        "description": "Determine the container for scrolling the dialog.",
        "type": "\"body\" | \"paper\"",
        "default": "'paper'"
      },
      {
        "identifier": "sx",
        "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
        "type": "SxProps<Theme>"
      },
      {
        "identifier": "TransitionComponent",
        "description": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
        "type": "JSXElementConstructor<TransitionProps & { children?: ReactElement<any, any>; }>",
        "default": "Fade"
      },
      {
        "identifier": "transitionDuration",
        "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
        "type": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }",
        "default": "{ enter: duration.enteringScreen, exit: duration.leavingScreen }"
      },
      {
        "identifier": "TransitionProps",
        "description": "Props applied to the transition element.\nBy default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component.",
        "type": "TransitionProps"
      },
      {
        "identifier": "slot",
        "type": "string"
      },
      {
        "identifier": "style",
        "type": "CSSProperties"
      },
      {
        "identifier": "className",
        "type": "string"
      },
      {
        "identifier": "ref",
        "type": "Ref<HTMLDivElement>"
      },
      {
        "identifier": "components",
        "description": "The components used for each slot inside the Modal.\nEither a string to use a HTML element or a component.",
        "type": "{ Root?: ElementType<any>; }",
        "default": "{}"
      },
      {
        "identifier": "componentsProps",
        "description": "The props used for each slot inside the Modal.",
        "type": "{ root?: { as: ElementType<any>; ownerState?: Omit<{ BackdropComponent?: ElementType<any>; BackdropProps?: Partial<BackdropUnstyledProps<\"div\", {}>>; ... 16 more ...; open: boolean; }, \"components\" | \"componentsProps\">; }; }",
        "default": "{}"
      },
      {
        "identifier": "key",
        "type": "Key"
      },
      {
        "identifier": "defaultChecked",
        "type": "boolean"
      },
      {
        "identifier": "defaultValue",
        "type": "string | number | readonly string[]"
      },
      {
        "identifier": "suppressContentEditableWarning",
        "type": "boolean"
      },
      {
        "identifier": "suppressHydrationWarning",
        "type": "boolean"
      },
      {
        "identifier": "accessKey",
        "type": "string"
      },
      {
        "identifier": "contentEditable",
        "type": "Booleanish | \"inherit\""
      },
      {
        "identifier": "contextMenu",
        "type": "string"
      },
      {
        "identifier": "dir",
        "type": "string"
      },
      {
        "identifier": "draggable",
        "type": "Booleanish"
      },
      {
        "identifier": "hidden",
        "type": "boolean"
      },
      {
        "identifier": "id",
        "type": "string"
      },
      {
        "identifier": "lang",
        "type": "string"
      },
      {
        "identifier": "placeholder",
        "type": "string"
      },
      {
        "identifier": "spellCheck",
        "type": "Booleanish"
      },
      {
        "identifier": "tabIndex",
        "type": "number"
      },
      {
        "identifier": "translate",
        "type": "\"yes\" | \"no\""
      },
      {
        "identifier": "radioGroup",
        "type": "string"
      },
      {
        "identifier": "role",
        "type": "AriaRole"
      },
      {
        "identifier": "about",
        "type": "string"
      },
      {
        "identifier": "datatype",
        "type": "string"
      },
      {
        "identifier": "inlist",
        "type": "any"
      },
      {
        "identifier": "prefix",
        "type": "string"
      },
      {
        "identifier": "property",
        "type": "string"
      },
      {
        "identifier": "resource",
        "type": "string"
      },
      {
        "identifier": "typeof",
        "type": "string"
      },
      {
        "identifier": "vocab",
        "type": "string"
      },
      {
        "identifier": "autoCapitalize",
        "type": "string"
      },
      {
        "identifier": "autoCorrect",
        "type": "string"
      },
      {
        "identifier": "autoSave",
        "type": "string"
      },
      {
        "identifier": "color",
        "type": "string"
      },
      {
        "identifier": "itemProp",
        "type": "string"
      },
      {
        "identifier": "itemScope",
        "type": "boolean"
      },
      {
        "identifier": "itemType",
        "type": "string"
      },
      {
        "identifier": "itemID",
        "type": "string"
      },
      {
        "identifier": "itemRef",
        "type": "string"
      },
      {
        "identifier": "results",
        "type": "number"
      },
      {
        "identifier": "security",
        "type": "string"
      },
      {
        "identifier": "unselectable",
        "type": "\"on\" | \"off\""
      },
      {
        "identifier": "inputMode",
        "description": "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
        "type": "\"text\" | \"search\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\""
      },
      {
        "identifier": "is",
        "description": "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
        "type": "string"
      },
      {
        "identifier": "aria-activedescendant",
        "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
        "type": "string"
      },
      {
        "identifier": "aria-atomic",
        "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-autocomplete",
        "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
        "type": "\"list\" | \"none\" | \"inline\" | \"both\""
      },
      {
        "identifier": "aria-busy",
        "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-checked",
        "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.",
        "type": "boolean | \"true\" | \"false\" | \"mixed\""
      },
      {
        "identifier": "aria-colcount",
        "description": "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
        "type": "number"
      },
      {
        "identifier": "aria-colindex",
        "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
        "type": "number"
      },
      {
        "identifier": "aria-colspan",
        "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
        "type": "number"
      },
      {
        "identifier": "aria-controls",
        "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
        "type": "string"
      },
      {
        "identifier": "aria-current",
        "description": "Indicates the element that represents the current item within a container or set of related elements.",
        "type": "boolean | \"time\" | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | \"date\""
      },
      {
        "identifier": "aria-details",
        "description": "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-disabled",
        "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-dropeffect",
        "description": "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
        "type": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\""
      },
      {
        "identifier": "aria-errormessage",
        "description": "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-expanded",
        "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-flowto",
        "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
        "type": "string"
      },
      {
        "identifier": "aria-grabbed",
        "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-haspopup",
        "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
        "type": "boolean | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"grid\" | \"listbox\" | \"tree\""
      },
      {
        "identifier": "aria-hidden",
        "description": "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-invalid",
        "description": "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
        "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
      },
      {
        "identifier": "aria-keyshortcuts",
        "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
        "type": "string"
      },
      {
        "identifier": "aria-label",
        "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
        "type": "string"
      },
      {
        "identifier": "aria-level",
        "description": "Defines the hierarchical level of an element within a structure.",
        "type": "number"
      },
      {
        "identifier": "aria-live",
        "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
        "type": "\"off\" | \"assertive\" | \"polite\""
      },
      {
        "identifier": "aria-modal",
        "description": "Indicates whether an element is modal when displayed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-multiline",
        "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-multiselectable",
        "description": "Indicates that the user may select more than one item from the current selectable descendants.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-orientation",
        "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
        "type": "\"horizontal\" | \"vertical\""
      },
      {
        "identifier": "aria-owns",
        "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
        "type": "string"
      },
      {
        "identifier": "aria-placeholder",
        "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
        "type": "string"
      },
      {
        "identifier": "aria-posinset",
        "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
        "type": "number"
      },
      {
        "identifier": "aria-pressed",
        "description": "Indicates the current \"pressed\" state of toggle buttons.\n@see aria-checked\n@see aria-selected.",
        "type": "boolean | \"true\" | \"false\" | \"mixed\""
      },
      {
        "identifier": "aria-readonly",
        "description": "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-relevant",
        "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
        "type": "\"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\""
      },
      {
        "identifier": "aria-required",
        "description": "Indicates that user input is required on the element before a form may be submitted.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-roledescription",
        "description": "Defines a human-readable, author-localized description for the role of an element.",
        "type": "string"
      },
      {
        "identifier": "aria-rowcount",
        "description": "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
        "type": "number"
      },
      {
        "identifier": "aria-rowindex",
        "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
        "type": "number"
      },
      {
        "identifier": "aria-rowspan",
        "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
        "type": "number"
      },
      {
        "identifier": "aria-selected",
        "description": "Indicates the current \"selected\" state of various widgets.\n@see aria-checked\n@see aria-pressed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-setsize",
        "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
        "type": "number"
      },
      {
        "identifier": "aria-sort",
        "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
        "type": "\"none\" | \"ascending\" | \"descending\" | \"other\""
      },
      {
        "identifier": "aria-valuemax",
        "description": "Defines the maximum allowed value for a range widget.",
        "type": "number"
      },
      {
        "identifier": "aria-valuemin",
        "description": "Defines the minimum allowed value for a range widget.",
        "type": "number"
      },
      {
        "identifier": "aria-valuenow",
        "description": "Defines the current value for a range widget.\n@see aria-valuetext.",
        "type": "number"
      },
      {
        "identifier": "aria-valuetext",
        "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
        "type": "string"
      },
      {
        "identifier": "dangerouslySetInnerHTML",
        "type": "{ __html: string; }"
      },
      {
        "identifier": "onCopy",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCopyCapture",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCut",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCutCapture",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPaste",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPasteCapture",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionEnd",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionEndCapture",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionStart",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionStartCapture",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionUpdate",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionUpdateCapture",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onFocus",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onFocusCapture",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBlur",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBlurCapture",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onChange",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onChangeCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBeforeInput",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBeforeInputCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInput",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInputCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onReset",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onResetCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSubmit",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSubmitCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInvalid",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInvalidCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoad",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onError",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onErrorCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyDown",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyDownCapture",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyPress",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyPressCapture",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyUp",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyUpCapture",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAbort",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAbortCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlay",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlayCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlayThrough",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlayThroughCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDurationChange",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDurationChangeCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEmptied",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEmptiedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEncrypted",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEncryptedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEnded",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEndedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedData",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedDataCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedMetadata",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedMetadataCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadStart",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadStartCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPause",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPauseCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlay",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlayCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlaying",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlayingCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onProgress",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onProgressCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onRateChange",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onRateChangeCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeeked",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeekedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeeking",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeekingCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onStalled",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onStalledCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSuspend",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSuspendCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTimeUpdate",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTimeUpdateCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onVolumeChange",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onVolumeChangeCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWaiting",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWaitingCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAuxClick",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAuxClickCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onClick",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onClickCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onContextMenu",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onContextMenuCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDoubleClick",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDoubleClickCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDrag",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEnd",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEndCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEnter",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEnterCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragExit",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragExitCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragLeave",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragLeaveCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragOver",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragOverCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragStart",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragStartCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDrop",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDropCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseDown",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseDownCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseEnter",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseLeave",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseMove",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseMoveCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOut",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOutCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOver",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOverCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseUp",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseUpCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSelect",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSelectCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchCancel",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchCancelCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchEnd",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchEndCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchMove",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchMoveCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchStart",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchStartCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerDown",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerDownCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerMove",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerMoveCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerUp",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerUpCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerCancel",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerCancelCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerEnter",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerEnterCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerLeave",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerLeaveCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOver",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOverCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOut",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOutCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onGotPointerCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onGotPointerCaptureCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLostPointerCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLostPointerCaptureCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onScroll",
        "type": "UIEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onScrollCapture",
        "type": "UIEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWheel",
        "type": "WheelEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWheelCapture",
        "type": "WheelEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationStart",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationStartCapture",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationEnd",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationEndCapture",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationIteration",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationIterationCapture",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTransitionEnd",
        "type": "TransitionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTransitionEndCapture",
        "type": "TransitionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "BackdropComponent",
        "description": "A backdrop component. This prop enables custom backdrop rendering.",
        "type": "ElementType<BackdropProps<\"span\", {}>> & ElementType<any>",
        "default": "styled(Backdrop, {\nname: 'MuiModal',\nslot: 'Backdrop',\noverridesResolver: (props, styles) => {\nreturn styles.backdrop;\n},\n})({\nzIndex: -1,\n})"
      },
      {
        "identifier": "BackdropProps",
        "description": "Props applied to the [`Backdrop`](/api/backdrop/) element.\nProps applied to the [`BackdropUnstyled`](/api/backdrop-unstyled/) element.",
        "type": "Partial<BackdropProps<\"span\", {}>> & Partial<BackdropUnstyledProps<\"div\", {}>>"
      },
      {
        "identifier": "closeAfterTransition",
        "description": "When set to true the Modal waits until a nested Transition is completed before closing.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "container",
        "description": "An HTML element or function that returns one.\nThe `container` will have the portal children appended to it.\n\nBy default, it uses the body of the top-level document object,\nso it's simply `document.body` most of the time.",
        "type": "Element | (() => Element)"
      },
      {
        "identifier": "disableAutoFocus",
        "description": "If `true`, the modal will not automatically shift focus to itself when it opens, and\nreplace it to the last focused element when it closes.\nThis also works correctly with any modal children that have the `disableAutoFocus` prop.\n\nGenerally this should never be set to `true` as it makes the modal less\naccessible to assistive technologies, like screen readers.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "disableEnforceFocus",
        "description": "If `true`, the modal will not prevent focus from leaving the modal while open.\n\nGenerally this should never be set to `true` as it makes the modal less\naccessible to assistive technologies, like screen readers.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "disablePortal",
        "description": "The `children` will be under the DOM hierarchy of the parent component.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "disableRestoreFocus",
        "description": "If `true`, the modal will not restore focus to previously focused element once\nmodal is hidden.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "disableScrollLock",
        "description": "Disable the scroll lock behavior.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "hideBackdrop",
        "description": "If `true`, the backdrop is not rendered.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "keepMounted",
        "description": "Always keep the children in the DOM.\nThis prop can be useful in SEO situation or\nwhen you want to maximize the responsiveness of the Modal.",
        "type": "boolean",
        "default": "false"
      }
    ]
  },
  "Dialog": {
    "default": [
      {
        "identifier": "width",
        "description": "弹框宽度",
        "type": "number"
      },
      {
        "identifier": "aria-describedby",
        "description": "The id(s) of the element(s) that describe the dialog.",
        "type": "string"
      },
      {
        "identifier": "aria-labelledby",
        "description": "The id(s) of the element(s) that label the dialog.",
        "type": "string"
      },
      {
        "identifier": "children",
        "description": "Dialog children, usually the included sub-components.",
        "type": "ReactNode"
      },
      {
        "identifier": "classes",
        "description": "Override or extend the styles applied to the component.",
        "type": "Partial<DialogClasses>"
      },
      {
        "identifier": "disableEscapeKeyDown",
        "description": "If `true`, hitting escape will not fire the `onClose` callback.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "fullScreen",
        "description": "If `true`, the dialog is full-screen.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "fullWidth",
        "description": "If `true`, the dialog stretches to `maxWidth`.\n\nNotice that the dialog width grow is limited by the default margin.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "maxWidth",
        "description": "Determine the max-width of the dialog.\nThe dialog width grows with the size of the screen.\nSet to `false` to disable `maxWidth`.",
        "type": "false | Breakpoint",
        "default": "'sm'"
      },
      {
        "identifier": "onBackdropClick",
        "description": "Callback fired when the backdrop is clicked.",
        "type": "ReactEventHandler<{}>"
      },
      {
        "identifier": "onClose",
        "description": "Callback fired when the component requests to be closed.\n@param event The event source of the callback.\n@param reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.",
        "type": "(event: {}, reason: \"backdropClick\" | \"escapeKeyDown\") => void"
      },
      {
        "identifier": "open",
        "description": "If `true`, the component is shown.",
        "type": "boolean",
        "required": true
      },
      {
        "identifier": "PaperComponent",
        "description": "The component used to render the body of the dialog.",
        "type": "JSXElementConstructor<PaperProps<\"div\", {}>>",
        "default": "Paper"
      },
      {
        "identifier": "PaperProps",
        "description": "Props applied to the [`Paper`](/api/paper/) element.",
        "type": "Partial<PaperProps<\"div\", {}>>",
        "default": "{}"
      },
      {
        "identifier": "scroll",
        "description": "Determine the container for scrolling the dialog.",
        "type": "\"body\" | \"paper\"",
        "default": "'paper'"
      },
      {
        "identifier": "sx",
        "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
        "type": "SxProps<Theme>"
      },
      {
        "identifier": "TransitionComponent",
        "description": "The component used for the transition.\n[Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.",
        "type": "JSXElementConstructor<TransitionProps & { children?: ReactElement<any, any>; }>",
        "default": "Fade"
      },
      {
        "identifier": "transitionDuration",
        "description": "The duration for the transition, in milliseconds.\nYou may specify a single timeout for all transitions, or individually with an object.",
        "type": "number | { appear?: number; enter?: number; exit?: number; } | { appear?: number; enter?: number; exit?: number; }",
        "default": "{ enter: duration.enteringScreen, exit: duration.leavingScreen }"
      },
      {
        "identifier": "TransitionProps",
        "description": "Props applied to the transition element.\nBy default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition) component.",
        "type": "TransitionProps"
      },
      {
        "identifier": "slot",
        "type": "string"
      },
      {
        "identifier": "style",
        "type": "CSSProperties"
      },
      {
        "identifier": "title",
        "type": "string"
      },
      {
        "identifier": "className",
        "type": "string"
      },
      {
        "identifier": "ref",
        "type": "Ref<HTMLDivElement>"
      },
      {
        "identifier": "components",
        "description": "The components used for each slot inside the Modal.\nEither a string to use a HTML element or a component.",
        "type": "{ Root?: ElementType<any>; }",
        "default": "{}"
      },
      {
        "identifier": "componentsProps",
        "description": "The props used for each slot inside the Modal.",
        "type": "{ root?: { as: ElementType<any>; ownerState?: Omit<{ BackdropComponent?: ElementType<any>; BackdropProps?: Partial<BackdropUnstyledProps<\"div\", {}>>; ... 16 more ...; open: boolean; }, \"components\" | \"componentsProps\">; }; }",
        "default": "{}"
      },
      {
        "identifier": "key",
        "type": "Key"
      },
      {
        "identifier": "defaultChecked",
        "type": "boolean"
      },
      {
        "identifier": "defaultValue",
        "type": "string | number | readonly string[]"
      },
      {
        "identifier": "suppressContentEditableWarning",
        "type": "boolean"
      },
      {
        "identifier": "suppressHydrationWarning",
        "type": "boolean"
      },
      {
        "identifier": "accessKey",
        "type": "string"
      },
      {
        "identifier": "contentEditable",
        "type": "Booleanish | \"inherit\""
      },
      {
        "identifier": "contextMenu",
        "type": "string"
      },
      {
        "identifier": "dir",
        "type": "string"
      },
      {
        "identifier": "draggable",
        "type": "Booleanish"
      },
      {
        "identifier": "hidden",
        "type": "boolean"
      },
      {
        "identifier": "id",
        "type": "string"
      },
      {
        "identifier": "lang",
        "type": "string"
      },
      {
        "identifier": "placeholder",
        "type": "string"
      },
      {
        "identifier": "spellCheck",
        "type": "Booleanish"
      },
      {
        "identifier": "tabIndex",
        "type": "number"
      },
      {
        "identifier": "translate",
        "type": "\"yes\" | \"no\""
      },
      {
        "identifier": "radioGroup",
        "type": "string"
      },
      {
        "identifier": "role",
        "type": "AriaRole"
      },
      {
        "identifier": "about",
        "type": "string"
      },
      {
        "identifier": "datatype",
        "type": "string"
      },
      {
        "identifier": "inlist",
        "type": "any"
      },
      {
        "identifier": "prefix",
        "type": "string"
      },
      {
        "identifier": "property",
        "type": "string"
      },
      {
        "identifier": "resource",
        "type": "string"
      },
      {
        "identifier": "typeof",
        "type": "string"
      },
      {
        "identifier": "vocab",
        "type": "string"
      },
      {
        "identifier": "autoCapitalize",
        "type": "string"
      },
      {
        "identifier": "autoCorrect",
        "type": "string"
      },
      {
        "identifier": "autoSave",
        "type": "string"
      },
      {
        "identifier": "color",
        "type": "string"
      },
      {
        "identifier": "itemProp",
        "type": "string"
      },
      {
        "identifier": "itemScope",
        "type": "boolean"
      },
      {
        "identifier": "itemType",
        "type": "string"
      },
      {
        "identifier": "itemID",
        "type": "string"
      },
      {
        "identifier": "itemRef",
        "type": "string"
      },
      {
        "identifier": "results",
        "type": "number"
      },
      {
        "identifier": "security",
        "type": "string"
      },
      {
        "identifier": "unselectable",
        "type": "\"on\" | \"off\""
      },
      {
        "identifier": "inputMode",
        "description": "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
        "type": "\"text\" | \"search\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\""
      },
      {
        "identifier": "is",
        "description": "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
        "type": "string"
      },
      {
        "identifier": "aria-activedescendant",
        "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
        "type": "string"
      },
      {
        "identifier": "aria-atomic",
        "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-autocomplete",
        "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
        "type": "\"list\" | \"none\" | \"inline\" | \"both\""
      },
      {
        "identifier": "aria-busy",
        "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-checked",
        "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.",
        "type": "boolean | \"true\" | \"false\" | \"mixed\""
      },
      {
        "identifier": "aria-colcount",
        "description": "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
        "type": "number"
      },
      {
        "identifier": "aria-colindex",
        "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
        "type": "number"
      },
      {
        "identifier": "aria-colspan",
        "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
        "type": "number"
      },
      {
        "identifier": "aria-controls",
        "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
        "type": "string"
      },
      {
        "identifier": "aria-current",
        "description": "Indicates the element that represents the current item within a container or set of related elements.",
        "type": "boolean | \"time\" | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | \"date\""
      },
      {
        "identifier": "aria-details",
        "description": "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-disabled",
        "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-dropeffect",
        "description": "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
        "type": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\""
      },
      {
        "identifier": "aria-errormessage",
        "description": "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-expanded",
        "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-flowto",
        "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
        "type": "string"
      },
      {
        "identifier": "aria-grabbed",
        "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-haspopup",
        "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
        "type": "boolean | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"grid\" | \"listbox\" | \"tree\""
      },
      {
        "identifier": "aria-hidden",
        "description": "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-invalid",
        "description": "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
        "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
      },
      {
        "identifier": "aria-keyshortcuts",
        "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
        "type": "string"
      },
      {
        "identifier": "aria-label",
        "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
        "type": "string"
      },
      {
        "identifier": "aria-level",
        "description": "Defines the hierarchical level of an element within a structure.",
        "type": "number"
      },
      {
        "identifier": "aria-live",
        "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
        "type": "\"off\" | \"assertive\" | \"polite\""
      },
      {
        "identifier": "aria-modal",
        "description": "Indicates whether an element is modal when displayed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-multiline",
        "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-multiselectable",
        "description": "Indicates that the user may select more than one item from the current selectable descendants.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-orientation",
        "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
        "type": "\"horizontal\" | \"vertical\""
      },
      {
        "identifier": "aria-owns",
        "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
        "type": "string"
      },
      {
        "identifier": "aria-placeholder",
        "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
        "type": "string"
      },
      {
        "identifier": "aria-posinset",
        "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
        "type": "number"
      },
      {
        "identifier": "aria-pressed",
        "description": "Indicates the current \"pressed\" state of toggle buttons.\n@see aria-checked\n@see aria-selected.",
        "type": "boolean | \"true\" | \"false\" | \"mixed\""
      },
      {
        "identifier": "aria-readonly",
        "description": "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-relevant",
        "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
        "type": "\"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\""
      },
      {
        "identifier": "aria-required",
        "description": "Indicates that user input is required on the element before a form may be submitted.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-roledescription",
        "description": "Defines a human-readable, author-localized description for the role of an element.",
        "type": "string"
      },
      {
        "identifier": "aria-rowcount",
        "description": "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
        "type": "number"
      },
      {
        "identifier": "aria-rowindex",
        "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
        "type": "number"
      },
      {
        "identifier": "aria-rowspan",
        "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
        "type": "number"
      },
      {
        "identifier": "aria-selected",
        "description": "Indicates the current \"selected\" state of various widgets.\n@see aria-checked\n@see aria-pressed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-setsize",
        "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
        "type": "number"
      },
      {
        "identifier": "aria-sort",
        "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
        "type": "\"none\" | \"ascending\" | \"descending\" | \"other\""
      },
      {
        "identifier": "aria-valuemax",
        "description": "Defines the maximum allowed value for a range widget.",
        "type": "number"
      },
      {
        "identifier": "aria-valuemin",
        "description": "Defines the minimum allowed value for a range widget.",
        "type": "number"
      },
      {
        "identifier": "aria-valuenow",
        "description": "Defines the current value for a range widget.\n@see aria-valuetext.",
        "type": "number"
      },
      {
        "identifier": "aria-valuetext",
        "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
        "type": "string"
      },
      {
        "identifier": "dangerouslySetInnerHTML",
        "type": "{ __html: string; }"
      },
      {
        "identifier": "onCopy",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCopyCapture",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCut",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCutCapture",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPaste",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPasteCapture",
        "type": "ClipboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionEnd",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionEndCapture",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionStart",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionStartCapture",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionUpdate",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCompositionUpdateCapture",
        "type": "CompositionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onFocus",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onFocusCapture",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBlur",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBlurCapture",
        "type": "FocusEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onChange",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onChangeCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBeforeInput",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onBeforeInputCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInput",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInputCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onReset",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onResetCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSubmit",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSubmitCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInvalid",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onInvalidCapture",
        "type": "FormEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoad",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onError",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onErrorCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyDown",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyDownCapture",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyPress",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyPressCapture",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyUp",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onKeyUpCapture",
        "type": "KeyboardEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAbort",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAbortCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlay",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlayCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlayThrough",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onCanPlayThroughCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDurationChange",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDurationChangeCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEmptied",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEmptiedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEncrypted",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEncryptedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEnded",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onEndedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedData",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedDataCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedMetadata",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadedMetadataCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadStart",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLoadStartCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPause",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPauseCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlay",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlayCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlaying",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPlayingCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onProgress",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onProgressCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onRateChange",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onRateChangeCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeeked",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeekedCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeeking",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSeekingCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onStalled",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onStalledCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSuspend",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSuspendCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTimeUpdate",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTimeUpdateCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onVolumeChange",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onVolumeChangeCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWaiting",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWaitingCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAuxClick",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAuxClickCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onClick",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onClickCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onContextMenu",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onContextMenuCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDoubleClick",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDoubleClickCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDrag",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEnd",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEndCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEnter",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragEnterCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragExit",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragExitCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragLeave",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragLeaveCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragOver",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragOverCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragStart",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDragStartCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDrop",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onDropCapture",
        "type": "DragEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseDown",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseDownCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseEnter",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseLeave",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseMove",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseMoveCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOut",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOutCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOver",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseOverCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseUp",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onMouseUpCapture",
        "type": "MouseEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSelect",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onSelectCapture",
        "type": "ReactEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchCancel",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchCancelCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchEnd",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchEndCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchMove",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchMoveCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchStart",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTouchStartCapture",
        "type": "TouchEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerDown",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerDownCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerMove",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerMoveCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerUp",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerUpCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerCancel",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerCancelCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerEnter",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerEnterCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerLeave",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerLeaveCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOver",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOverCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOut",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onPointerOutCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onGotPointerCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onGotPointerCaptureCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLostPointerCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onLostPointerCaptureCapture",
        "type": "PointerEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onScroll",
        "type": "UIEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onScrollCapture",
        "type": "UIEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWheel",
        "type": "WheelEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onWheelCapture",
        "type": "WheelEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationStart",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationStartCapture",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationEnd",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationEndCapture",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationIteration",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onAnimationIterationCapture",
        "type": "AnimationEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTransitionEnd",
        "type": "TransitionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "onTransitionEndCapture",
        "type": "TransitionEventHandler<HTMLDivElement>"
      },
      {
        "identifier": "BackdropComponent",
        "description": "A backdrop component. This prop enables custom backdrop rendering.",
        "type": "ElementType<BackdropProps<\"span\", {}>> & ElementType<any>",
        "default": "styled(Backdrop, {\nname: 'MuiModal',\nslot: 'Backdrop',\noverridesResolver: (props, styles) => {\nreturn styles.backdrop;\n},\n})({\nzIndex: -1,\n})"
      },
      {
        "identifier": "BackdropProps",
        "description": "Props applied to the [`Backdrop`](/api/backdrop/) element.\nProps applied to the [`BackdropUnstyled`](/api/backdrop-unstyled/) element.",
        "type": "Partial<BackdropProps<\"span\", {}>> & Partial<BackdropUnstyledProps<\"div\", {}>>"
      },
      {
        "identifier": "closeAfterTransition",
        "description": "When set to true the Modal waits until a nested Transition is completed before closing.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "container",
        "description": "An HTML element or function that returns one.\nThe `container` will have the portal children appended to it.\n\nBy default, it uses the body of the top-level document object,\nso it's simply `document.body` most of the time.",
        "type": "Element | (() => Element)"
      },
      {
        "identifier": "disableAutoFocus",
        "description": "If `true`, the modal will not automatically shift focus to itself when it opens, and\nreplace it to the last focused element when it closes.\nThis also works correctly with any modal children that have the `disableAutoFocus` prop.\n\nGenerally this should never be set to `true` as it makes the modal less\naccessible to assistive technologies, like screen readers.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "disableEnforceFocus",
        "description": "If `true`, the modal will not prevent focus from leaving the modal while open.\n\nGenerally this should never be set to `true` as it makes the modal less\naccessible to assistive technologies, like screen readers.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "disablePortal",
        "description": "The `children` will be under the DOM hierarchy of the parent component.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "disableRestoreFocus",
        "description": "If `true`, the modal will not restore focus to previously focused element once\nmodal is hidden.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "disableScrollLock",
        "description": "Disable the scroll lock behavior.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "hideBackdrop",
        "description": "If `true`, the backdrop is not rendered.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "keepMounted",
        "description": "Always keep the children in the DOM.\nThis prop can be useful in SEO situation or\nwhen you want to maximize the responsiveness of the Modal.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "isShowClose",
        "description": "是否显示dialog又上角“x”",
        "type": "boolean",
        "default": "true"
      },
      {
        "identifier": "header",
        "description": "\b\b传null则不显示， 传vnode则自定义底部内容， 不传则展示默认footer",
        "type": "ReactElement<any, string | JSXElementConstructor<any>>"
      },
      {
        "identifier": "footer",
        "description": "\b\b传null则不显示， 传vnode则自定义底部内容， 不传则展示默认footer",
        "type": "ReactElement<any, string | JSXElementConstructor<any>>"
      },
      {
        "identifier": "okText",
        "description": "footer 确认按钮文案 默认为“好的”'",
        "type": "string",
        "default": "好的"
      },
      {
        "identifier": "closeText",
        "description": "footer 取消按钮文案 默认为“取消”'",
        "type": "string",
        "default": "取消"
      },
      {
        "identifier": "isShowCloseBtn",
        "description": "是否显示取消按钮",
        "type": "boolean",
        "default": "true"
      },
      {
        "identifier": "okProps",
        "description": "footer 取消按钮props",
        "type": "{ children?: ReactNode; classes?: Partial<ButtonClasses>; color?: \"inherit\" | \"primary\" | \"secondary\" | \"success\" | \"error\" | \"info\" | \"warning\"; ... 9 more ...; variant?: \"text\" | ... 1 more ... | \"contained\"; } & Omit<...> & CommonProps & Omit<...>",
        "default": "{\n    variant: 'contained',\n  }"
      },
      {
        "identifier": "closeProps",
        "description": "footer 取消按钮props",
        "type": "{ children?: ReactNode; classes?: Partial<ButtonClasses>; color?: \"inherit\" | \"primary\" | \"secondary\" | \"success\" | \"error\" | \"info\" | \"warning\"; ... 9 more ...; variant?: \"text\" | ... 1 more ... | \"contained\"; } & Omit<...> & CommonProps & Omit<...>",
        "default": "{\n    variant: 'text',\n    color: 'secondary',\n  }"
      },
      {
        "identifier": "onOk",
        "type": "(event: any) => void | Promise<void>"
      }
    ]
  },
  "Icon": {
    "default": [
      {
        "identifier": "name",
        "description": "@avocadoui /icons组件名称",
        "type": "string"
      },
      {
        "identifier": "children",
        "description": "Node passed into the SVG element.",
        "type": "ReactNode"
      },
      {
        "identifier": "classes",
        "description": "Override or extend the styles applied to the component.",
        "type": "Partial<SvgIconClasses> & Partial<ClassNameMap<never>>"
      },
      {
        "identifier": "color",
        "description": "The color of the component. It supports those theme colors that make sense for this component.\nYou can use the `htmlColor` prop to apply a color attribute to the SVG element.",
        "type": "\"inherit\" | \"action\" | \"disabled\" | \"primary\" | \"secondary\" | \"error\" | \"info\" | \"success\" | \"warning\"",
        "default": "'inherit'"
      },
      {
        "identifier": "fontSize",
        "description": "The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.",
        "type": "\"small\" | \"inherit\" | \"large\" | \"medium\"",
        "default": "'medium'"
      },
      {
        "identifier": "htmlColor",
        "description": "Applies a color attribute to the SVG element.",
        "type": "string"
      },
      {
        "identifier": "shapeRendering",
        "description": "The shape-rendering attribute. The behavior of the different options is described on the\n[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\nIf you are having issues with blurry icons you should investigate this prop.",
        "type": "string"
      },
      {
        "identifier": "sx",
        "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
        "type": "SxProps<Theme>"
      },
      {
        "identifier": "titleAccess",
        "description": "Provides a human-readable title for the element that contains it.\nhttps://www.w3.org/TR/SVG-access/#Equivalent",
        "type": "string"
      },
      {
        "identifier": "viewBox",
        "description": "Allows you to redefine what the coordinates without units mean inside an SVG element.\nFor example, if the SVG element is 500 (width) by 200 (height),\nand you pass viewBox=\"0 0 50 20\",\nthis means that the coordinates inside the SVG will go from the top left corner (0,0)\nto bottom right (50,20) and each unit will be worth 10px.",
        "type": "string",
        "default": "'0 0 24 24'"
      },
      {
        "identifier": "className",
        "type": "string"
      },
      {
        "identifier": "style",
        "type": "CSSProperties"
      },
      {
        "identifier": "string",
        "type": "string | number"
      },
      {
        "identifier": "ref",
        "type": "Ref<SVGSVGElement>"
      },
      {
        "identifier": "clipPath",
        "type": "string"
      },
      {
        "identifier": "filter",
        "type": "string"
      },
      {
        "identifier": "mask",
        "type": "string"
      },
      {
        "identifier": "path",
        "type": "string"
      },
      {
        "identifier": "height",
        "type": "string | number"
      },
      {
        "identifier": "id",
        "type": "string"
      },
      {
        "identifier": "lang",
        "type": "string"
      },
      {
        "identifier": "max",
        "type": "string | number"
      },
      {
        "identifier": "media",
        "type": "string"
      },
      {
        "identifier": "method",
        "type": "string"
      },
      {
        "identifier": "min",
        "type": "string | number"
      },
      {
        "identifier": "target",
        "type": "string"
      },
      {
        "identifier": "type",
        "type": "string"
      },
      {
        "identifier": "width",
        "type": "string | number"
      },
      {
        "identifier": "role",
        "type": "AriaRole"
      },
      {
        "identifier": "tabIndex",
        "type": "number"
      },
      {
        "identifier": "crossOrigin",
        "type": "\"\" | \"anonymous\" | \"use-credentials\""
      },
      {
        "identifier": "accentHeight",
        "type": "string | number"
      },
      {
        "identifier": "accumulate",
        "type": "\"none\" | \"sum\""
      },
      {
        "identifier": "additive",
        "type": "\"replace\" | \"sum\""
      },
      {
        "identifier": "alignmentBaseline",
        "type": "\"alphabetic\" | \"hanging\" | \"ideographic\" | \"mathematical\" | \"auto\" | \"baseline\" | \"before-edge\" | \"text-before-edge\" | \"middle\" | \"central\" | \"after-edge\" | \"text-after-edge\" | \"inherit\""
      },
      {
        "identifier": "allowReorder",
        "type": "\"no\" | \"yes\""
      },
      {
        "identifier": "alphabetic",
        "type": "string | number"
      },
      {
        "identifier": "amplitude",
        "type": "string | number"
      },
      {
        "identifier": "arabicForm",
        "type": "\"initial\" | \"medial\" | \"terminal\" | \"isolated\""
      },
      {
        "identifier": "ascent",
        "type": "string | number"
      },
      {
        "identifier": "attributeName",
        "type": "string"
      },
      {
        "identifier": "attributeType",
        "type": "string"
      },
      {
        "identifier": "autoReverse",
        "type": "Booleanish"
      },
      {
        "identifier": "azimuth",
        "type": "string | number"
      },
      {
        "identifier": "baseFrequency",
        "type": "string | number"
      },
      {
        "identifier": "baselineShift",
        "type": "string | number"
      },
      {
        "identifier": "baseProfile",
        "type": "string | number"
      },
      {
        "identifier": "bbox",
        "type": "string | number"
      },
      {
        "identifier": "begin",
        "type": "string | number"
      },
      {
        "identifier": "bias",
        "type": "string | number"
      },
      {
        "identifier": "by",
        "type": "string | number"
      },
      {
        "identifier": "calcMode",
        "type": "string | number"
      },
      {
        "identifier": "capHeight",
        "type": "string | number"
      },
      {
        "identifier": "clip",
        "type": "string | number"
      },
      {
        "identifier": "clipPathUnits",
        "type": "string | number"
      },
      {
        "identifier": "clipRule",
        "type": "string | number"
      },
      {
        "identifier": "colorInterpolation",
        "type": "string | number"
      },
      {
        "identifier": "colorInterpolationFilters",
        "type": "\"auto\" | \"inherit\" | \"sRGB\" | \"linearRGB\""
      },
      {
        "identifier": "colorProfile",
        "type": "string | number"
      },
      {
        "identifier": "colorRendering",
        "type": "string | number"
      },
      {
        "identifier": "contentScriptType",
        "type": "string | number"
      },
      {
        "identifier": "contentStyleType",
        "type": "string | number"
      },
      {
        "identifier": "cursor",
        "type": "string | number"
      },
      {
        "identifier": "cx",
        "type": "string | number"
      },
      {
        "identifier": "cy",
        "type": "string | number"
      },
      {
        "identifier": "d",
        "type": "string"
      },
      {
        "identifier": "decelerate",
        "type": "string | number"
      },
      {
        "identifier": "descent",
        "type": "string | number"
      },
      {
        "identifier": "diffuseConstant",
        "type": "string | number"
      },
      {
        "identifier": "direction",
        "type": "string | number"
      },
      {
        "identifier": "display",
        "type": "string | number"
      },
      {
        "identifier": "divisor",
        "type": "string | number"
      },
      {
        "identifier": "dominantBaseline",
        "type": "string | number"
      },
      {
        "identifier": "dur",
        "type": "string | number"
      },
      {
        "identifier": "dx",
        "type": "string | number"
      },
      {
        "identifier": "dy",
        "type": "string | number"
      },
      {
        "identifier": "edgeMode",
        "type": "string | number"
      },
      {
        "identifier": "elevation",
        "type": "string | number"
      },
      {
        "identifier": "enableBackground",
        "type": "string | number"
      },
      {
        "identifier": "end",
        "type": "string | number"
      },
      {
        "identifier": "exponent",
        "type": "string | number"
      },
      {
        "identifier": "externalResourcesRequired",
        "type": "Booleanish"
      },
      {
        "identifier": "fill",
        "type": "string"
      },
      {
        "identifier": "fillOpacity",
        "type": "string | number"
      },
      {
        "identifier": "fillRule",
        "type": "\"inherit\" | \"nonzero\" | \"evenodd\""
      },
      {
        "identifier": "filterRes",
        "type": "string | number"
      },
      {
        "identifier": "filterUnits",
        "type": "string | number"
      },
      {
        "identifier": "floodColor",
        "type": "string | number"
      },
      {
        "identifier": "floodOpacity",
        "type": "string | number"
      },
      {
        "identifier": "focusable",
        "type": "\"auto\" | Booleanish"
      },
      {
        "identifier": "fontFamily",
        "type": "string"
      },
      {
        "identifier": "fontSizeAdjust",
        "type": "string | number"
      },
      {
        "identifier": "fontStretch",
        "type": "string | number"
      },
      {
        "identifier": "fontStyle",
        "type": "string | number"
      },
      {
        "identifier": "fontVariant",
        "type": "string | number"
      },
      {
        "identifier": "fontWeight",
        "type": "string | number"
      },
      {
        "identifier": "format",
        "type": "string | number"
      },
      {
        "identifier": "from",
        "type": "string | number"
      },
      {
        "identifier": "fx",
        "type": "string | number"
      },
      {
        "identifier": "fy",
        "type": "string | number"
      },
      {
        "identifier": "g1",
        "type": "string | number"
      },
      {
        "identifier": "g2",
        "type": "string | number"
      },
      {
        "identifier": "glyphName",
        "type": "string | number"
      },
      {
        "identifier": "glyphOrientationHorizontal",
        "type": "string | number"
      },
      {
        "identifier": "glyphOrientationVertical",
        "type": "string | number"
      },
      {
        "identifier": "glyphRef",
        "type": "string | number"
      },
      {
        "identifier": "gradientTransform",
        "type": "string"
      },
      {
        "identifier": "gradientUnits",
        "type": "string"
      },
      {
        "identifier": "hanging",
        "type": "string | number"
      },
      {
        "identifier": "horizAdvX",
        "type": "string | number"
      },
      {
        "identifier": "horizOriginX",
        "type": "string | number"
      },
      {
        "identifier": "href",
        "type": "string"
      },
      {
        "identifier": "ideographic",
        "type": "string | number"
      },
      {
        "identifier": "imageRendering",
        "type": "string | number"
      },
      {
        "identifier": "in2",
        "type": "string | number"
      },
      {
        "identifier": "in",
        "type": "string"
      },
      {
        "identifier": "intercept",
        "type": "string | number"
      },
      {
        "identifier": "k1",
        "type": "string | number"
      },
      {
        "identifier": "k2",
        "type": "string | number"
      },
      {
        "identifier": "k3",
        "type": "string | number"
      },
      {
        "identifier": "k4",
        "type": "string | number"
      },
      {
        "identifier": "k",
        "type": "string | number"
      },
      {
        "identifier": "kernelMatrix",
        "type": "string | number"
      },
      {
        "identifier": "kernelUnitLength",
        "type": "string | number"
      },
      {
        "identifier": "kerning",
        "type": "string | number"
      },
      {
        "identifier": "keyPoints",
        "type": "string | number"
      },
      {
        "identifier": "keySplines",
        "type": "string | number"
      },
      {
        "identifier": "keyTimes",
        "type": "string | number"
      },
      {
        "identifier": "lengthAdjust",
        "type": "string | number"
      },
      {
        "identifier": "letterSpacing",
        "type": "string | number"
      },
      {
        "identifier": "lightingColor",
        "type": "string | number"
      },
      {
        "identifier": "limitingConeAngle",
        "type": "string | number"
      },
      {
        "identifier": "local",
        "type": "string | number"
      },
      {
        "identifier": "markerEnd",
        "type": "string"
      },
      {
        "identifier": "markerHeight",
        "type": "string | number"
      },
      {
        "identifier": "markerMid",
        "type": "string"
      },
      {
        "identifier": "markerStart",
        "type": "string"
      },
      {
        "identifier": "markerUnits",
        "type": "string | number"
      },
      {
        "identifier": "markerWidth",
        "type": "string | number"
      },
      {
        "identifier": "maskContentUnits",
        "type": "string | number"
      },
      {
        "identifier": "maskUnits",
        "type": "string | number"
      },
      {
        "identifier": "mathematical",
        "type": "string | number"
      },
      {
        "identifier": "mode",
        "type": "string | number"
      },
      {
        "identifier": "numOctaves",
        "type": "string | number"
      },
      {
        "identifier": "offset",
        "type": "string | number"
      },
      {
        "identifier": "opacity",
        "type": "string | number"
      },
      {
        "identifier": "operator",
        "type": "string | number"
      },
      {
        "identifier": "order",
        "type": "string | number"
      },
      {
        "identifier": "orient",
        "type": "string | number"
      },
      {
        "identifier": "orientation",
        "type": "string | number"
      },
      {
        "identifier": "origin",
        "type": "string | number"
      },
      {
        "identifier": "overflow",
        "type": "string | number"
      },
      {
        "identifier": "overlinePosition",
        "type": "string | number"
      },
      {
        "identifier": "overlineThickness",
        "type": "string | number"
      },
      {
        "identifier": "paintOrder",
        "type": "string | number"
      },
      {
        "identifier": "panose1",
        "type": "string | number"
      },
      {
        "identifier": "pathLength",
        "type": "string | number"
      },
      {
        "identifier": "patternContentUnits",
        "type": "string"
      },
      {
        "identifier": "patternTransform",
        "type": "string | number"
      },
      {
        "identifier": "patternUnits",
        "type": "string"
      },
      {
        "identifier": "pointerEvents",
        "type": "string | number"
      },
      {
        "identifier": "points",
        "type": "string"
      },
      {
        "identifier": "pointsAtX",
        "type": "string | number"
      },
      {
        "identifier": "pointsAtY",
        "type": "string | number"
      },
      {
        "identifier": "pointsAtZ",
        "type": "string | number"
      },
      {
        "identifier": "preserveAlpha",
        "type": "Booleanish"
      },
      {
        "identifier": "preserveAspectRatio",
        "type": "string"
      },
      {
        "identifier": "primitiveUnits",
        "type": "string | number"
      },
      {
        "identifier": "r",
        "type": "string | number"
      },
      {
        "identifier": "radius",
        "type": "string | number"
      },
      {
        "identifier": "refX",
        "type": "string | number"
      },
      {
        "identifier": "refY",
        "type": "string | number"
      },
      {
        "identifier": "renderingIntent",
        "type": "string | number"
      },
      {
        "identifier": "repeatCount",
        "type": "string | number"
      },
      {
        "identifier": "repeatDur",
        "type": "string | number"
      },
      {
        "identifier": "requiredExtensions",
        "type": "string | number"
      },
      {
        "identifier": "requiredFeatures",
        "type": "string | number"
      },
      {
        "identifier": "restart",
        "type": "string | number"
      },
      {
        "identifier": "result",
        "type": "string"
      },
      {
        "identifier": "rotate",
        "type": "string | number"
      },
      {
        "identifier": "rx",
        "type": "string | number"
      },
      {
        "identifier": "ry",
        "type": "string | number"
      },
      {
        "identifier": "scale",
        "type": "string | number"
      },
      {
        "identifier": "seed",
        "type": "string | number"
      },
      {
        "identifier": "slope",
        "type": "string | number"
      },
      {
        "identifier": "spacing",
        "type": "string | number"
      },
      {
        "identifier": "specularConstant",
        "type": "string | number"
      },
      {
        "identifier": "specularExponent",
        "type": "string | number"
      },
      {
        "identifier": "speed",
        "type": "string | number"
      },
      {
        "identifier": "spreadMethod",
        "type": "string"
      },
      {
        "identifier": "startOffset",
        "type": "string | number"
      },
      {
        "identifier": "stdDeviation",
        "type": "string | number"
      },
      {
        "identifier": "stemh",
        "type": "string | number"
      },
      {
        "identifier": "stemv",
        "type": "string | number"
      },
      {
        "identifier": "stitchTiles",
        "type": "string | number"
      },
      {
        "identifier": "stopColor",
        "type": "string"
      },
      {
        "identifier": "stopOpacity",
        "type": "string | number"
      },
      {
        "identifier": "strikethroughPosition",
        "type": "string | number"
      },
      {
        "identifier": "strikethroughThickness",
        "type": "string | number"
      },
      {
        "identifier": "stroke",
        "type": "string"
      },
      {
        "identifier": "strokeDasharray",
        "type": "string | number"
      },
      {
        "identifier": "strokeDashoffset",
        "type": "string | number"
      },
      {
        "identifier": "strokeLinecap",
        "type": "\"inherit\" | \"butt\" | \"round\" | \"square\""
      },
      {
        "identifier": "strokeLinejoin",
        "type": "\"inherit\" | \"round\" | \"miter\" | \"bevel\""
      },
      {
        "identifier": "strokeMiterlimit",
        "type": "string | number"
      },
      {
        "identifier": "strokeOpacity",
        "type": "string | number"
      },
      {
        "identifier": "strokeWidth",
        "type": "string | number"
      },
      {
        "identifier": "surfaceScale",
        "type": "string | number"
      },
      {
        "identifier": "systemLanguage",
        "type": "string | number"
      },
      {
        "identifier": "tableValues",
        "type": "string | number"
      },
      {
        "identifier": "targetX",
        "type": "string | number"
      },
      {
        "identifier": "targetY",
        "type": "string | number"
      },
      {
        "identifier": "textAnchor",
        "type": "string"
      },
      {
        "identifier": "textDecoration",
        "type": "string | number"
      },
      {
        "identifier": "textLength",
        "type": "string | number"
      },
      {
        "identifier": "textRendering",
        "type": "string | number"
      },
      {
        "identifier": "to",
        "type": "string | number"
      },
      {
        "identifier": "transform",
        "type": "string"
      },
      {
        "identifier": "u1",
        "type": "string | number"
      },
      {
        "identifier": "u2",
        "type": "string | number"
      },
      {
        "identifier": "underlinePosition",
        "type": "string | number"
      },
      {
        "identifier": "underlineThickness",
        "type": "string | number"
      },
      {
        "identifier": "unicode",
        "type": "string | number"
      },
      {
        "identifier": "unicodeBidi",
        "type": "string | number"
      },
      {
        "identifier": "unicodeRange",
        "type": "string | number"
      },
      {
        "identifier": "unitsPerEm",
        "type": "string | number"
      },
      {
        "identifier": "vAlphabetic",
        "type": "string | number"
      },
      {
        "identifier": "values",
        "type": "string"
      },
      {
        "identifier": "vectorEffect",
        "type": "string | number"
      },
      {
        "identifier": "version",
        "type": "string"
      },
      {
        "identifier": "vertAdvY",
        "type": "string | number"
      },
      {
        "identifier": "vertOriginX",
        "type": "string | number"
      },
      {
        "identifier": "vertOriginY",
        "type": "string | number"
      },
      {
        "identifier": "vHanging",
        "type": "string | number"
      },
      {
        "identifier": "vIdeographic",
        "type": "string | number"
      },
      {
        "identifier": "viewTarget",
        "type": "string | number"
      },
      {
        "identifier": "visibility",
        "type": "string | number"
      },
      {
        "identifier": "vMathematical",
        "type": "string | number"
      },
      {
        "identifier": "widths",
        "type": "string | number"
      },
      {
        "identifier": "wordSpacing",
        "type": "string | number"
      },
      {
        "identifier": "writingMode",
        "type": "string | number"
      },
      {
        "identifier": "x1",
        "type": "string | number"
      },
      {
        "identifier": "x2",
        "type": "string | number"
      },
      {
        "identifier": "x",
        "type": "string | number"
      },
      {
        "identifier": "xChannelSelector",
        "type": "string"
      },
      {
        "identifier": "xHeight",
        "type": "string | number"
      },
      {
        "identifier": "xlinkActuate",
        "type": "string"
      },
      {
        "identifier": "xlinkArcrole",
        "type": "string"
      },
      {
        "identifier": "xlinkHref",
        "type": "string"
      },
      {
        "identifier": "xlinkRole",
        "type": "string"
      },
      {
        "identifier": "xlinkShow",
        "type": "string"
      },
      {
        "identifier": "xlinkTitle",
        "type": "string"
      },
      {
        "identifier": "xlinkType",
        "type": "string"
      },
      {
        "identifier": "xmlBase",
        "type": "string"
      },
      {
        "identifier": "xmlLang",
        "type": "string"
      },
      {
        "identifier": "xmlns",
        "type": "string"
      },
      {
        "identifier": "xmlnsXlink",
        "type": "string"
      },
      {
        "identifier": "xmlSpace",
        "type": "string"
      },
      {
        "identifier": "y1",
        "type": "string | number"
      },
      {
        "identifier": "y2",
        "type": "string | number"
      },
      {
        "identifier": "y",
        "type": "string | number"
      },
      {
        "identifier": "yChannelSelector",
        "type": "string"
      },
      {
        "identifier": "z",
        "type": "string | number"
      },
      {
        "identifier": "zoomAndPan",
        "type": "string"
      },
      {
        "identifier": "aria-activedescendant",
        "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
        "type": "string"
      },
      {
        "identifier": "aria-atomic",
        "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-autocomplete",
        "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
        "type": "\"list\" | \"none\" | \"inline\" | \"both\""
      },
      {
        "identifier": "aria-busy",
        "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-checked",
        "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.",
        "type": "boolean | \"true\" | \"false\" | \"mixed\""
      },
      {
        "identifier": "aria-colcount",
        "description": "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
        "type": "number"
      },
      {
        "identifier": "aria-colindex",
        "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
        "type": "number"
      },
      {
        "identifier": "aria-colspan",
        "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
        "type": "number"
      },
      {
        "identifier": "aria-controls",
        "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
        "type": "string"
      },
      {
        "identifier": "aria-current",
        "description": "Indicates the element that represents the current item within a container or set of related elements.",
        "type": "boolean | \"time\" | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | \"date\""
      },
      {
        "identifier": "aria-describedby",
        "description": "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
        "type": "string"
      },
      {
        "identifier": "aria-details",
        "description": "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-disabled",
        "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-dropeffect",
        "description": "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
        "type": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\""
      },
      {
        "identifier": "aria-errormessage",
        "description": "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-expanded",
        "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-flowto",
        "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
        "type": "string"
      },
      {
        "identifier": "aria-grabbed",
        "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-haspopup",
        "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
        "type": "boolean | \"dialog\" | \"menu\" | \"grid\" | \"listbox\" | \"tree\" | \"true\" | \"false\""
      },
      {
        "identifier": "aria-hidden",
        "description": "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-invalid",
        "description": "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
        "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
      },
      {
        "identifier": "aria-keyshortcuts",
        "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
        "type": "string"
      },
      {
        "identifier": "aria-label",
        "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
        "type": "string"
      },
      {
        "identifier": "aria-labelledby",
        "description": "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-level",
        "description": "Defines the hierarchical level of an element within a structure.",
        "type": "number"
      },
      {
        "identifier": "aria-live",
        "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
        "type": "\"off\" | \"assertive\" | \"polite\""
      },
      {
        "identifier": "aria-modal",
        "description": "Indicates whether an element is modal when displayed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-multiline",
        "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-multiselectable",
        "description": "Indicates that the user may select more than one item from the current selectable descendants.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-orientation",
        "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
        "type": "\"horizontal\" | \"vertical\""
      },
      {
        "identifier": "aria-owns",
        "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
        "type": "string"
      },
      {
        "identifier": "aria-placeholder",
        "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
        "type": "string"
      },
      {
        "identifier": "aria-posinset",
        "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
        "type": "number"
      },
      {
        "identifier": "aria-pressed",
        "description": "Indicates the current \"pressed\" state of toggle buttons.\n@see aria-checked\n@see aria-selected.",
        "type": "boolean | \"true\" | \"false\" | \"mixed\""
      },
      {
        "identifier": "aria-readonly",
        "description": "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-relevant",
        "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
        "type": "\"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\""
      },
      {
        "identifier": "aria-required",
        "description": "Indicates that user input is required on the element before a form may be submitted.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-roledescription",
        "description": "Defines a human-readable, author-localized description for the role of an element.",
        "type": "string"
      },
      {
        "identifier": "aria-rowcount",
        "description": "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
        "type": "number"
      },
      {
        "identifier": "aria-rowindex",
        "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
        "type": "number"
      },
      {
        "identifier": "aria-rowspan",
        "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
        "type": "number"
      },
      {
        "identifier": "aria-selected",
        "description": "Indicates the current \"selected\" state of various widgets.\n@see aria-checked\n@see aria-pressed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-setsize",
        "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
        "type": "number"
      },
      {
        "identifier": "aria-sort",
        "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
        "type": "\"none\" | \"ascending\" | \"descending\" | \"other\""
      },
      {
        "identifier": "aria-valuemax",
        "description": "Defines the maximum allowed value for a range widget.",
        "type": "number"
      },
      {
        "identifier": "aria-valuemin",
        "description": "Defines the minimum allowed value for a range widget.",
        "type": "number"
      },
      {
        "identifier": "aria-valuenow",
        "description": "Defines the current value for a range widget.\n@see aria-valuetext.",
        "type": "number"
      },
      {
        "identifier": "aria-valuetext",
        "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
        "type": "string"
      },
      {
        "identifier": "dangerouslySetInnerHTML",
        "type": "{ __html: string; }"
      },
      {
        "identifier": "onCopy",
        "type": "ClipboardEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onCopyCapture",
        "type": "ClipboardEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onCut",
        "type": "ClipboardEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onCutCapture",
        "type": "ClipboardEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPaste",
        "type": "ClipboardEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPasteCapture",
        "type": "ClipboardEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onCompositionEnd",
        "type": "CompositionEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onCompositionEndCapture",
        "type": "CompositionEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onCompositionStart",
        "type": "CompositionEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onCompositionStartCapture",
        "type": "CompositionEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onCompositionUpdate",
        "type": "CompositionEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onCompositionUpdateCapture",
        "type": "CompositionEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onFocus",
        "type": "FocusEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onFocusCapture",
        "type": "FocusEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onBlur",
        "type": "FocusEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onBlurCapture",
        "type": "FocusEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onChange",
        "type": "FormEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onChangeCapture",
        "type": "FormEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onBeforeInput",
        "type": "FormEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onBeforeInputCapture",
        "type": "FormEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onInput",
        "type": "FormEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onInputCapture",
        "type": "FormEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onReset",
        "type": "FormEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onResetCapture",
        "type": "FormEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onSubmit",
        "type": "FormEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onSubmitCapture",
        "type": "FormEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onInvalid",
        "type": "FormEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onInvalidCapture",
        "type": "FormEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onLoad",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onLoadCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onError",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onErrorCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onKeyDown",
        "type": "KeyboardEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onKeyDownCapture",
        "type": "KeyboardEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onKeyPress",
        "type": "KeyboardEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onKeyPressCapture",
        "type": "KeyboardEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onKeyUp",
        "type": "KeyboardEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onKeyUpCapture",
        "type": "KeyboardEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onAbort",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onAbortCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onCanPlay",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onCanPlayCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onCanPlayThrough",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onCanPlayThroughCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDurationChange",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDurationChangeCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onEmptied",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onEmptiedCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onEncrypted",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onEncryptedCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onEnded",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onEndedCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onLoadedData",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onLoadedDataCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onLoadedMetadata",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onLoadedMetadataCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onLoadStart",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onLoadStartCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPause",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPauseCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPlay",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPlayCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPlaying",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPlayingCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onProgress",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onProgressCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onRateChange",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onRateChangeCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onSeeked",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onSeekedCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onSeeking",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onSeekingCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onStalled",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onStalledCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onSuspend",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onSuspendCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onTimeUpdate",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onTimeUpdateCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onVolumeChange",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onVolumeChangeCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onWaiting",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onWaitingCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onAuxClick",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onAuxClickCapture",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onClick",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onClickCapture",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onContextMenu",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onContextMenuCapture",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDoubleClick",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDoubleClickCapture",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDrag",
        "type": "DragEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDragCapture",
        "type": "DragEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDragEnd",
        "type": "DragEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDragEndCapture",
        "type": "DragEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDragEnter",
        "type": "DragEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDragEnterCapture",
        "type": "DragEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDragExit",
        "type": "DragEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDragExitCapture",
        "type": "DragEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDragLeave",
        "type": "DragEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDragLeaveCapture",
        "type": "DragEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDragOver",
        "type": "DragEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDragOverCapture",
        "type": "DragEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDragStart",
        "type": "DragEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDragStartCapture",
        "type": "DragEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDrop",
        "type": "DragEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onDropCapture",
        "type": "DragEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onMouseDown",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onMouseDownCapture",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onMouseEnter",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onMouseLeave",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onMouseMove",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onMouseMoveCapture",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onMouseOut",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onMouseOutCapture",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onMouseOver",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onMouseOverCapture",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onMouseUp",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onMouseUpCapture",
        "type": "MouseEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onSelect",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onSelectCapture",
        "type": "ReactEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onTouchCancel",
        "type": "TouchEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onTouchCancelCapture",
        "type": "TouchEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onTouchEnd",
        "type": "TouchEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onTouchEndCapture",
        "type": "TouchEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onTouchMove",
        "type": "TouchEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onTouchMoveCapture",
        "type": "TouchEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onTouchStart",
        "type": "TouchEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onTouchStartCapture",
        "type": "TouchEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPointerDown",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPointerDownCapture",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPointerMove",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPointerMoveCapture",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPointerUp",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPointerUpCapture",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPointerCancel",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPointerCancelCapture",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPointerEnter",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPointerEnterCapture",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPointerLeave",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPointerLeaveCapture",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPointerOver",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPointerOverCapture",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPointerOut",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onPointerOutCapture",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onGotPointerCapture",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onGotPointerCaptureCapture",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onLostPointerCapture",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onLostPointerCaptureCapture",
        "type": "PointerEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onScroll",
        "type": "UIEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onScrollCapture",
        "type": "UIEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onWheel",
        "type": "WheelEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onWheelCapture",
        "type": "WheelEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onAnimationStart",
        "type": "AnimationEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onAnimationStartCapture",
        "type": "AnimationEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onAnimationEnd",
        "type": "AnimationEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onAnimationEndCapture",
        "type": "AnimationEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onAnimationIteration",
        "type": "AnimationEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onAnimationIterationCapture",
        "type": "AnimationEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onTransitionEnd",
        "type": "TransitionEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "onTransitionEndCapture",
        "type": "TransitionEventHandler<SVGSVGElement>"
      },
      {
        "identifier": "key",
        "type": "Key"
      }
    ]
  },
  "Loading": {
    "default": [
      {
        "identifier": "size",
        "description": "尺寸",
        "type": "number | sizeType",
        "default": "large"
      },
      {
        "identifier": "color",
        "description": "颜色",
        "type": "string",
        "default": "primary"
      },
      {
        "identifier": "classes",
        "description": "Override or extend the styles applied to the component.",
        "type": "Partial<CircularProgressClasses>"
      },
      {
        "identifier": "disableShrink",
        "description": "If `true`, the shrink animation is disabled.\nThis only works if variant is `indeterminate`.",
        "type": "boolean",
        "default": "false"
      },
      {
        "identifier": "sx",
        "description": "The system prop that allows defining system overrides as well as additional CSS styles.",
        "type": "SxProps<Theme>"
      },
      {
        "identifier": "thickness",
        "description": "The thickness of the circle.",
        "type": "number",
        "default": "3.6"
      },
      {
        "identifier": "value",
        "description": "The value of the progress indicator for the determinate variant.\nValue between 0 and 100.",
        "type": "number",
        "default": "0"
      },
      {
        "identifier": "variant",
        "description": "The variant to use.\nUse indeterminate when there is no progress value.",
        "type": "\"determinate\" | \"indeterminate\"",
        "default": "'indeterminate'"
      },
      {
        "identifier": "defaultChecked",
        "type": "boolean"
      },
      {
        "identifier": "defaultValue",
        "type": "string | number | readonly string[]"
      },
      {
        "identifier": "suppressContentEditableWarning",
        "type": "boolean"
      },
      {
        "identifier": "suppressHydrationWarning",
        "type": "boolean"
      },
      {
        "identifier": "accessKey",
        "type": "string"
      },
      {
        "identifier": "className",
        "type": "string"
      },
      {
        "identifier": "contentEditable",
        "type": "Booleanish | \"inherit\""
      },
      {
        "identifier": "contextMenu",
        "type": "string"
      },
      {
        "identifier": "dir",
        "type": "string"
      },
      {
        "identifier": "draggable",
        "type": "Booleanish"
      },
      {
        "identifier": "hidden",
        "type": "boolean"
      },
      {
        "identifier": "id",
        "type": "string"
      },
      {
        "identifier": "lang",
        "type": "string"
      },
      {
        "identifier": "placeholder",
        "type": "string"
      },
      {
        "identifier": "slot",
        "type": "string"
      },
      {
        "identifier": "spellCheck",
        "type": "Booleanish"
      },
      {
        "identifier": "style",
        "type": "CSSProperties"
      },
      {
        "identifier": "tabIndex",
        "type": "number"
      },
      {
        "identifier": "title",
        "type": "string"
      },
      {
        "identifier": "translate",
        "type": "\"yes\" | \"no\""
      },
      {
        "identifier": "radioGroup",
        "type": "string"
      },
      {
        "identifier": "role",
        "type": "AriaRole"
      },
      {
        "identifier": "about",
        "type": "string"
      },
      {
        "identifier": "datatype",
        "type": "string"
      },
      {
        "identifier": "inlist",
        "type": "any"
      },
      {
        "identifier": "prefix",
        "type": "string"
      },
      {
        "identifier": "property",
        "type": "string"
      },
      {
        "identifier": "resource",
        "type": "string"
      },
      {
        "identifier": "typeof",
        "type": "string"
      },
      {
        "identifier": "vocab",
        "type": "string"
      },
      {
        "identifier": "autoCapitalize",
        "type": "string"
      },
      {
        "identifier": "autoCorrect",
        "type": "string"
      },
      {
        "identifier": "autoSave",
        "type": "string"
      },
      {
        "identifier": "itemProp",
        "type": "string"
      },
      {
        "identifier": "itemScope",
        "type": "boolean"
      },
      {
        "identifier": "itemType",
        "type": "string"
      },
      {
        "identifier": "itemID",
        "type": "string"
      },
      {
        "identifier": "itemRef",
        "type": "string"
      },
      {
        "identifier": "results",
        "type": "number"
      },
      {
        "identifier": "security",
        "type": "string"
      },
      {
        "identifier": "unselectable",
        "type": "\"on\" | \"off\""
      },
      {
        "identifier": "inputMode",
        "description": "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
        "type": "\"none\" | \"search\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\""
      },
      {
        "identifier": "is",
        "description": "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
        "type": "string"
      },
      {
        "identifier": "aria-activedescendant",
        "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
        "type": "string"
      },
      {
        "identifier": "aria-atomic",
        "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-autocomplete",
        "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
        "type": "\"list\" | \"none\" | \"inline\" | \"both\""
      },
      {
        "identifier": "aria-busy",
        "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-checked",
        "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.",
        "type": "boolean | \"true\" | \"false\" | \"mixed\""
      },
      {
        "identifier": "aria-colcount",
        "description": "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
        "type": "number"
      },
      {
        "identifier": "aria-colindex",
        "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
        "type": "number"
      },
      {
        "identifier": "aria-colspan",
        "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
        "type": "number"
      },
      {
        "identifier": "aria-controls",
        "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
        "type": "string"
      },
      {
        "identifier": "aria-current",
        "description": "Indicates the element that represents the current item within a container or set of related elements.",
        "type": "boolean | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\""
      },
      {
        "identifier": "aria-describedby",
        "description": "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
        "type": "string"
      },
      {
        "identifier": "aria-details",
        "description": "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-disabled",
        "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-dropeffect",
        "description": "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
        "type": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\""
      },
      {
        "identifier": "aria-errormessage",
        "description": "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-expanded",
        "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-flowto",
        "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
        "type": "string"
      },
      {
        "identifier": "aria-grabbed",
        "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-haspopup",
        "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
        "type": "boolean | \"grid\" | \"true\" | \"false\" | \"dialog\" | \"listbox\" | \"menu\" | \"tree\""
      },
      {
        "identifier": "aria-hidden",
        "description": "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-invalid",
        "description": "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
        "type": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
      },
      {
        "identifier": "aria-keyshortcuts",
        "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
        "type": "string"
      },
      {
        "identifier": "aria-label",
        "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
        "type": "string"
      },
      {
        "identifier": "aria-labelledby",
        "description": "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
        "type": "string"
      },
      {
        "identifier": "aria-level",
        "description": "Defines the hierarchical level of an element within a structure.",
        "type": "number"
      },
      {
        "identifier": "aria-live",
        "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
        "type": "\"off\" | \"assertive\" | \"polite\""
      },
      {
        "identifier": "aria-modal",
        "description": "Indicates whether an element is modal when displayed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-multiline",
        "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-multiselectable",
        "description": "Indicates that the user may select more than one item from the current selectable descendants.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-orientation",
        "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
        "type": "\"horizontal\" | \"vertical\""
      },
      {
        "identifier": "aria-owns",
        "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
        "type": "string"
      },
      {
        "identifier": "aria-placeholder",
        "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
        "type": "string"
      },
      {
        "identifier": "aria-posinset",
        "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
        "type": "number"
      },
      {
        "identifier": "aria-pressed",
        "description": "Indicates the current \"pressed\" state of toggle buttons.\n@see aria-checked\n@see aria-selected.",
        "type": "boolean | \"true\" | \"false\" | \"mixed\""
      },
      {
        "identifier": "aria-readonly",
        "description": "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-relevant",
        "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
        "type": "\"all\" | \"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\""
      },
      {
        "identifier": "aria-required",
        "description": "Indicates that user input is required on the element before a form may be submitted.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-roledescription",
        "description": "Defines a human-readable, author-localized description for the role of an element.",
        "type": "string"
      },
      {
        "identifier": "aria-rowcount",
        "description": "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
        "type": "number"
      },
      {
        "identifier": "aria-rowindex",
        "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
        "type": "number"
      },
      {
        "identifier": "aria-rowspan",
        "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
        "type": "number"
      },
      {
        "identifier": "aria-selected",
        "description": "Indicates the current \"selected\" state of various widgets.\n@see aria-checked\n@see aria-pressed.",
        "type": "Booleanish"
      },
      {
        "identifier": "aria-setsize",
        "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
        "type": "number"
      },
      {
        "identifier": "aria-sort",
        "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
        "type": "\"none\" | \"ascending\" | \"descending\" | \"other\""
      },
      {
        "identifier": "aria-valuemax",
        "description": "Defines the maximum allowed value for a range widget.",
        "type": "number"
      },
      {
        "identifier": "aria-valuemin",
        "description": "Defines the minimum allowed value for a range widget.",
        "type": "number"
      },
      {
        "identifier": "aria-valuenow",
        "description": "Defines the current value for a range widget.\n@see aria-valuetext.",
        "type": "number"
      },
      {
        "identifier": "aria-valuetext",
        "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
        "type": "string"
      },
      {
        "identifier": "dangerouslySetInnerHTML",
        "type": "{ __html: string; }"
      },
      {
        "identifier": "onCopy",
        "type": "ClipboardEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onCopyCapture",
        "type": "ClipboardEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onCut",
        "type": "ClipboardEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onCutCapture",
        "type": "ClipboardEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPaste",
        "type": "ClipboardEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPasteCapture",
        "type": "ClipboardEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onCompositionEnd",
        "type": "CompositionEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onCompositionEndCapture",
        "type": "CompositionEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onCompositionStart",
        "type": "CompositionEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onCompositionStartCapture",
        "type": "CompositionEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onCompositionUpdate",
        "type": "CompositionEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onCompositionUpdateCapture",
        "type": "CompositionEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onFocus",
        "type": "FocusEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onFocusCapture",
        "type": "FocusEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onBlur",
        "type": "FocusEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onBlurCapture",
        "type": "FocusEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onChange",
        "type": "FormEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onChangeCapture",
        "type": "FormEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onBeforeInput",
        "type": "FormEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onBeforeInputCapture",
        "type": "FormEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onInput",
        "type": "FormEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onInputCapture",
        "type": "FormEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onReset",
        "type": "FormEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onResetCapture",
        "type": "FormEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onSubmit",
        "type": "FormEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onSubmitCapture",
        "type": "FormEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onInvalid",
        "type": "FormEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onInvalidCapture",
        "type": "FormEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onLoad",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onLoadCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onError",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onErrorCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onKeyDown",
        "type": "KeyboardEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onKeyDownCapture",
        "type": "KeyboardEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onKeyPress",
        "type": "KeyboardEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onKeyPressCapture",
        "type": "KeyboardEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onKeyUp",
        "type": "KeyboardEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onKeyUpCapture",
        "type": "KeyboardEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onAbort",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onAbortCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onCanPlay",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onCanPlayCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onCanPlayThrough",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onCanPlayThroughCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDurationChange",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDurationChangeCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onEmptied",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onEmptiedCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onEncrypted",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onEncryptedCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onEnded",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onEndedCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onLoadedData",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onLoadedDataCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onLoadedMetadata",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onLoadedMetadataCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onLoadStart",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onLoadStartCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPause",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPauseCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPlay",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPlayCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPlaying",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPlayingCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onProgress",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onProgressCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onRateChange",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onRateChangeCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onSeeked",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onSeekedCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onSeeking",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onSeekingCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onStalled",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onStalledCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onSuspend",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onSuspendCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onTimeUpdate",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onTimeUpdateCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onVolumeChange",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onVolumeChangeCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onWaiting",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onWaitingCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onAuxClick",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onAuxClickCapture",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onClick",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onClickCapture",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onContextMenu",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onContextMenuCapture",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDoubleClick",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDoubleClickCapture",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDrag",
        "type": "DragEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDragCapture",
        "type": "DragEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDragEnd",
        "type": "DragEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDragEndCapture",
        "type": "DragEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDragEnter",
        "type": "DragEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDragEnterCapture",
        "type": "DragEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDragExit",
        "type": "DragEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDragExitCapture",
        "type": "DragEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDragLeave",
        "type": "DragEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDragLeaveCapture",
        "type": "DragEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDragOver",
        "type": "DragEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDragOverCapture",
        "type": "DragEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDragStart",
        "type": "DragEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDragStartCapture",
        "type": "DragEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDrop",
        "type": "DragEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onDropCapture",
        "type": "DragEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onMouseDown",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onMouseDownCapture",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onMouseEnter",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onMouseLeave",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onMouseMove",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onMouseMoveCapture",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onMouseOut",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onMouseOutCapture",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onMouseOver",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onMouseOverCapture",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onMouseUp",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onMouseUpCapture",
        "type": "MouseEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onSelect",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onSelectCapture",
        "type": "ReactEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onTouchCancel",
        "type": "TouchEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onTouchCancelCapture",
        "type": "TouchEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onTouchEnd",
        "type": "TouchEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onTouchEndCapture",
        "type": "TouchEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onTouchMove",
        "type": "TouchEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onTouchMoveCapture",
        "type": "TouchEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onTouchStart",
        "type": "TouchEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onTouchStartCapture",
        "type": "TouchEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPointerDown",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPointerDownCapture",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPointerMove",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPointerMoveCapture",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPointerUp",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPointerUpCapture",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPointerCancel",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPointerCancelCapture",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPointerEnter",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPointerEnterCapture",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPointerLeave",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPointerLeaveCapture",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPointerOver",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPointerOverCapture",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPointerOut",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onPointerOutCapture",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onGotPointerCapture",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onGotPointerCaptureCapture",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onLostPointerCapture",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onLostPointerCaptureCapture",
        "type": "PointerEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onScroll",
        "type": "UIEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onScrollCapture",
        "type": "UIEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onWheel",
        "type": "WheelEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onWheelCapture",
        "type": "WheelEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onAnimationStart",
        "type": "AnimationEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onAnimationStartCapture",
        "type": "AnimationEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onAnimationEnd",
        "type": "AnimationEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onAnimationEndCapture",
        "type": "AnimationEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onAnimationIteration",
        "type": "AnimationEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onAnimationIterationCapture",
        "type": "AnimationEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onTransitionEnd",
        "type": "TransitionEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "onTransitionEndCapture",
        "type": "TransitionEventHandler<HTMLSpanElement>"
      },
      {
        "identifier": "ref",
        "type": "Ref<unknown>"
      }
    ]
  },
  "Toast": {}
}